     1                                  ; Name:     ftok.asm
     2                                  ;
     3                                  ; Build:    nasm "-felf64" ftok.asm -l ftok.lst -o ftok.o
     4                                  ;
     5                                  ; Description:  This is the assembler version of the c/c++ function ftok.
     6                                  ;               the type key_t is actually just a long, you can use any number you want. But what if you hard-code the number and some other unrelated
     7                                  ;               program hardcodes the same number but wants another queue? The solution is to use the ftok() function which generates a key from two arguments:
     8                                  ;               key_t ftok(const char *path, int id);
     9                                  ;
    10                                  ; source: http://beej.us/guide/bgipc/output/html/multipage/mq.html
    11                                  
    12                                  global  ftok        ; make the function accessible for other programs
    13                                  
    14                                  [list -]
    18                                  
    19                                  section .data
    20                                  
    21                                       STAT       stat
    21                              <1>  %1:
    21                              <1>  ISTRUC STAT_STRUC
    21 00000000 0000000000000000    <1>  at STAT_STRUC.st_dev, dq 0
    21 00000008 0000000000000000    <1>  at STAT_STRUC.st_ino, dq 0
    21 00000010 0000000000000000    <1>  at STAT_STRUC.st_nlink, dq 0
    21 00000018 00000000            <1>  at STAT_STRUC.st_mod, dd 0
    21 0000001C 00000000            <1>  at STAT_STRUC.st_uid, dd 0
    21 00000020 00000000            <1>  at STAT_STRUC.st_gid, dd 0
    21 00000024 0000000000000000    <1>  at STAT_STRUC.st_rdev, dq 0
    21 0000002C 00000000            <1>  at STAT_STRUC._pad1, dd 0
    21 00000030 0000000000000000    <1>  at STAT_STRUC.st_size, dq 0
    21 00000038 00000000            <1>  at STAT_STRUC.st_blksize, dd 0
    21 0000003C 00000000            <1>  at STAT_STRUC._pad2, dd 0
    21 00000040 0000000000000000    <1>  at STAT_STRUC.st_blocks, dq 0
    21 00000048 0000000000000000    <1>  at STAT_STRUC.st_atime, dq 0
    21 00000050 0000000000000000    <1>  at STAT_STRUC.st_atime_nsec, dq 0
    21 00000058 0000000000000000    <1>  at STAT_STRUC.st_mtime, dq 0
    21 00000060 0000000000000000    <1>  at STAT_STRUC.st_mtime_nsec, dq 0
    21 00000068 0000000000000000    <1>  at STAT_STRUC.st_ctime, dq 0
    21 00000070 0000000000000000    <1>  at STAT_STRUC.st_ctime_nsec, dq 0
    21 00000078 0000000000000000    <1>  at STAT_STRUC._unused1, dq 0
    21 00000080 0000000000000000    <1>  at STAT_STRUC._unused2, dq 0
    21 00000088 0000000000000000    <1>  at STAT_STRUC._unused3, dq 0
    21                              <1>  IEND
    21                              <1> 
    21                              <1> 
    21                              <1> 
    21                              <1>  %define %1.st_dev %1+STAT_STRUC.st_dev
    21                              <1>  %define %1.st_ino %1+STAT_STRUC.st_ino
    21                              <1>  %define %1.st_nlink %1+STAT_STRUC.st_nlink
    21                              <1>  %define %1.st_mod %1+STAT_STRUC.st_mod
    21                              <1>  %define %1.st_uid %1+STAT_STRUC.st_uid
    21                              <1>  %define %1.st_gid %1+STAT_STRUC.st_gid
    21                              <1>  %define %1.st_rdev %1+STAT_STRUC.st_rdev
    21                              <1> 
    21                              <1>  %define %1.st_size %1+STAT_STRUC.st_size
    21                              <1>  %define %1.st_blksize %1+STAT_STRUC.st_blksize
    21                              <1> 
    21                              <1>  %define %1.st_blocks %1+STAT_STRUC.st_blocks
    21                              <1>  %define %1.st_atime %1+STAT_STRUC.st_atime
    21                              <1>  %define %1.st_atime_nsec %1+STAT_STRUC.st_atime_nsec
    21                              <1>  %define %1.st_mtime %1+STAT_STRUC.st_mtime
    21                              <1>  %define %1.st_mtime_nsec %1+STAT_STRUC.st_mtime_nsec
    21                              <1>  %define %1.st_ctime %1+STAT_STRUC.st_ctime
    21                              <1>  %define %1.st_ctime_nsec %1+STAT_STRUC.st_ctime_nsec
    21                              <1> 
    21                              <1> 
    21                              <1> 
    22                                       
    23                                  section .text
    24                                  
    25                                  ftok:
    26                                       ; entry:      RDI has the path/file string to the file
    27                                       ;             RSI has an 'project id' arbitrary choosen.
    28                                       ; on return:  RAX has a unique key
    29                                       ; on failure: RAX = a negative number containing the error
    30                                       ;
    31                                       ; the ftok function is defined in c/c++ as follows:
    32                                       ; key = ((st.st_ino & 0xffff) | ((st.st_dev & 0xff) << 16) | ((proj_id & 0xff) << 24));
    33                                  
    34                                       ; save the project id in R8 (will remain after syscalls)
    35 00000000 4989F0                       mov       r8, rsi
    36                                       ; open the file
    37 00000003 4831F6B8020000000F-          syscall   open, rdi, O_RDONLY
    37 0000000C 05                 
    38 0000000D 4821C0                       and       rax, rax
    39 00000010 784B                         js        .done                                ; something wrong, errno in rax and return
    40 00000012 48BE-                        syscall   fstat, rax, stat                     ; get filestatus
    40 00000014 [0000000000000000]-
    40 0000001C 4889C7B8050000000F-
    40 00000025 05                 
    41 00000026 4821C0                       and       rax, rax
    42 00000029 7832                         js        .done                                ; something wrong, errno in rax and return
    43 0000002B 488B0425[08000000]           mov       rax, qword [stat.st_ino]             ; get the file size
    44 00000033 4825FFFF0000                 and       rax, 0xFFFF
    45 00000039 488B1C25[00000000]           mov       rbx, qword [stat.st_dev]             ; ID of device containing file
    46 00000041 4881E3FF000000               and       rbx, 0xFF
    47 00000048 48C1E310                     shl       rbx, 16
    48 0000004C 4809D8                       or        rax, rbx
    49 0000004F 4981E0FF000000               and       r8, 0xFF                             ; R8 = proj_id
    50 00000056 49C1E018                     shl       r8, 24
    51 0000005A 4C09C0                       or        rax, r8
    52                                       ; rax now contains a key which uniquely identifies the file.
    53                                  .done:     
    54 0000005D C3                           ret
