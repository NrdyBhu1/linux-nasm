     1                                  ; Name:         leapyear.asm
     2                                  ;
     3                                  ; Build:        nasm -felf64 leapyear.asm -o leapyear.o 
     4                                  ;
     5                                  ; in  :  RDI holds the year in hexadecimal format. Year is a positive number.
     6                                  ; out :  RAX = -1, no leap, RAX = 0 leap
     7                                  
     8                                  global pagesize
     9                                      
    10                                  section .text
    11                                  
    12                                  LeapYear:
    13 00000000 53                            push      rbx                ; save used registers
    14 00000001 51                            push      rcx
    15 00000002 52                            push      rdx
    16 00000003 4889F8                        mov       rax, rdi
    17 00000006 4831C9                        xor       rcx, rcx           ; help register = 0
    18 00000009 48FFC9                        dec       rcx                ; assume not leap, rcx = -1
    19 0000000C 48A903000000                  test      rax, 3             ; last two bits 0?
    20 00000012 751E                          jnz       .@1                ; if not year is not disible by 4 -> no leapyear
    21 00000014 48FFC1                        inc       rcx                ; assume year is a leapyear, rcx = 0
    22 00000017 4831D2                        xor       rdx, rdx           ; prepare rdx for division
    23 0000001A BB64000000                    mov       rbx, 100           ; year / 100
    24 0000001F 48F7F3                        div       rbx
    25 00000022 4821D2                        and       rdx, rdx           ; remainder = 0?
    26 00000025 750B                          jnz       .@1                ; no, no leapyear
    27 00000027 48A903000000                  test      rax, 3             ; multiples of 100 aren't leap years except if last two bits
    28                                                                     ;  are zero 0 (divisible by 4) then also divisible by 400
    29 0000002D 7403                          jz        .@1                ; yes, leap year
    30 0000002F 48FFC9                        dec       rcx                ; no, not leap year, rcx = -1
    31                                  .@1:
    32 00000032 4889C8                        mov       rax, rcx           ; mov result in RAX
    33 00000035 5A                            pop       rdx
    34 00000036 59                            pop       rcx
    35 00000037 5B                            pop       rbx
    36 00000038 C3                            ret
