     1                                  ; Name:		host.asm
     2                                  ;
     3                                  ; Build:	nasm "-felf32" host.asm -l host.lst -o host.o
     4                                  ;		ld -s -melf_i386 -o host host.o
     5                                  ;
     6                                  ; Description:	resolve host to ip address
     7                                  ;
     8                                  ; Source:	asmutils - http://asm.sourceforge.net/asmutils.html
     9                                  ;
    10                                  ; Remark:
    11                                  ; Copyright (C) 2001,2002 Rudolf Marek <marekr2@fel.cvut.cz>, <r.marek@sh.cvut.cz>, <ruik@atlas.cz>
    12                                  ; Syntax: host hostname [dns_server_ip]
    13                                  ; Supports /etc/resolv.conf when found
    14                                  ; See RFC1035 for futher info
    15                                  ;
    16                                  ;     : 28-Jan-2017 reassembled for 32 bits with nasm version 2.11 on 64 bit linux (agguro <admin@agguro.org>)
    17                                  ; 0.02: 20-May-2003	added "-t" option (Willy Tarreau <wtarreau@yahoo.fr>)
    18                                  ; 0.01: 01-Mar-2002	initial release
    19                                  
    20                                  bits 32
    21                                  
    22                                  [list -]
    22          ******************       warning: using 32 bits syscalls [-w+user]
    31                                  
    32                                  	%assign BUFF_SIZE  	0512
    33                                  	%assign DNS_PORT 	053
    34                                  	%assign TIMEOUT		60000
    35                                  	
    36                                  section .bss
    37                                  
    38 00000000 <res 00000004>          	hostname:		resd 1
    39 00000004 <res 00000004>          	server_ip:		resd 1
    40 00000008 <res 00000004>          	timeout:		resd 1
    41 0000000C <res 0000001E>          	ipbuff:			resb 30
    42                                  
    43                                  	dns_q:
    44 0000002A <res 00000002>          	.size: 			resw 1
    45 0000002C <res 00000002>          	.id:			resw 1
    46 0000002E <res 00000002>          	.comm:			resw 1
    47 00000030 <res 00000002>          	.qd:			resw 1
    48 00000032 <res 00000002>          	.an:			resw 1
    49 00000034 <res 00000002>          	.ns:			resw 1
    50 00000036 <res 00000002>          	.ar:			resw 1
    51 00000038 <res 00000200>          	.qname_b:		resb BUFF_SIZE
    52                                  
    53                                  	poll:
    54 00000238 <res 00000004>          	.fd1:			resd 1
    55 0000023C <res 00000002>          	.e1:			resw 1
    56 0000023E <res 00000002>          	.re1:			resw 1
    57                                  
    58 00000240 <res 00000010>          	sockaddr_in:	        resb 16	;sizeof struct sockaddr_in
    59                                  
    60 00000250 <res 00000200>          	buf:			resb 0x200
    61                                  
    62                                  section .data
    63                                  
    64 00000000 55736167653A20686F-     	usage:	 		db	"Usage: host [ -t ms ] hostname [dns_server_ip]",10
    64 00000009 7374205B202D74206D-
    64 00000012 73205D20686F73746E-
    64 0000001B 616D65205B646E735F-
    64 00000024 7365727665725F6970-
    64 0000002D 5D0A               
    65                                  	.length			equ $ - usage
    66 0000002F 436F6E6E656374696F-     	refused: 		db	"Connection refused to DNS server :(",10
    66 00000038 6E2072656675736564-
    66 00000041 20746F20444E532073-
    66 0000004A 6572766572203A280A 
    67                                  	.length			equ $ - refused
    68 00000053 2F6574632F7265736F-     	resolv			db	"/etc/resolv.conf", 0
    68 0000005C 6C762E636F6E6600   
    69                                  
    70                                  section .text
    71                                  		global _start
    72                                  
    73                                  _start:
    74 00000000 5B                      	pop	ebx
    75 00000001 4B                      	dec	ebx
    76 00000002 7549                    	jnz 	.ok
    77                                  .usage:
    78                                  	syscall	write, stdout, usage, usage.length
    78                              <1> %if %0 > 0
    78                              <1>  %if %0 > 1
    78                              <1>  %if %0 > 2
    78                              <1>  %if %0 > 3
    78                              <1>  %if %0 > 4
    78                              <1>  %if %0 > 5
    78                              <1>  %ifnum %6
    78                              <1>  %if %6 == 0
    78                              <1>  xor edi, edi
    78                              <1>  %elif %6 == -1
    78                              <1>  or edi, -1
    78                              <1>  %else
    78                              <1>  mov edi, %6
    78                              <1>  %endif
    78                              <1>  %elifnidni %6, edi
    78                              <1>  mov edi, %6
    78                              <1>  %endif
    78                              <1>  %endif
    78                              <1>  %ifnum %5
    78                              <1>  %if %5 == 0
    78                              <1>  xor esi, esi
    78                              <1>  %elif %5 == -1
    78                              <1>  or esi, -1
    78                              <1>  %else
    78                              <1>  mov esi, %5
    78                              <1>  %endif
    78                              <1>  %elifnidni %5, esi
    78                              <1>  mov esi, %5
    78                              <1>  %endif
    78                              <1>  %endif
    78                              <1>  %ifnum %4
    78                              <1>  %if %4 == 0
    78                              <1>  xor edx, edx
    78                              <1>  %elif %4 == -1
    78                              <1>  or edx, -1
    78                              <1>  %else
    78                              <1>  mov edx, %4
    78                              <1>  %endif
    78                              <1>  %elifnidni %4, edx
    78 00000004 BA2F000000          <1>  mov edx, %4
    78                              <1>  %endif
    78                              <1>  %endif
    78                              <1>  %ifnum %3
    78                              <1>  %if %3 == 0
    78                              <1>  xor ecx, ecx
    78                              <1>  %elif %3 == -1
    78                              <1>  or ecx, -1
    78                              <1>  %else
    78                              <1>  mov ecx, %3
    78                              <1>  %endif
    78                              <1>  %elifnidni %3, ecx
    78 00000009 B9[00000000]        <1>  mov ecx, %3
    78                              <1>  %endif
    78                              <1>  %endif
    78                              <1>  %ifnum %2
    78                              <1>  %if %2 == 0
    78                              <1>  xor ebx, ebx
    78                              <1>  %elif %2 == -1
    78                              <1>  or ebx, -1
    78                              <1>  %else
    78 0000000E BB01000000          <1>  mov ebx, %2
    78                              <1>  %endif
    78                              <1>  %elifnidni %2, ebx
    78                              <1>  mov ebx, %2
    78                              <1>  %endif
    78                              <1>  %endif
    78 00000013 B804000000          <1>  mov eax, SYS_ %+ %1
    78 00000018 CD80                <1>  int 0x80
    78                              <1> %else
    78                              <1>  int 0x80
    78                              <1> %endif
    79 0000001A 31C0                    	xor	eax,eax
    80                                  .exit:
    81 0000001C 09C0                    	or	eax,eax
    82 0000001E 741B                    	jz	.ok_exit
    83 00000020 83F891                  	cmp 	eax,ECONNREFUSED
    84 00000023 7516                    	jnz 	.ok_exit
    85                                  	syscall	write, stdout,refused,refused.length
    85                              <1> %if %0 > 0
    85                              <1>  %if %0 > 1
    85                              <1>  %if %0 > 2
    85                              <1>  %if %0 > 3
    85                              <1>  %if %0 > 4
    85                              <1>  %if %0 > 5
    85                              <1>  %ifnum %6
    85                              <1>  %if %6 == 0
    85                              <1>  xor edi, edi
    85                              <1>  %elif %6 == -1
    85                              <1>  or edi, -1
    85                              <1>  %else
    85                              <1>  mov edi, %6
    85                              <1>  %endif
    85                              <1>  %elifnidni %6, edi
    85                              <1>  mov edi, %6
    85                              <1>  %endif
    85                              <1>  %endif
    85                              <1>  %ifnum %5
    85                              <1>  %if %5 == 0
    85                              <1>  xor esi, esi
    85                              <1>  %elif %5 == -1
    85                              <1>  or esi, -1
    85                              <1>  %else
    85                              <1>  mov esi, %5
    85                              <1>  %endif
    85                              <1>  %elifnidni %5, esi
    85                              <1>  mov esi, %5
    85                              <1>  %endif
    85                              <1>  %endif
    85                              <1>  %ifnum %4
    85                              <1>  %if %4 == 0
    85                              <1>  xor edx, edx
    85                              <1>  %elif %4 == -1
    85                              <1>  or edx, -1
    85                              <1>  %else
    85                              <1>  mov edx, %4
    85                              <1>  %endif
    85                              <1>  %elifnidni %4, edx
    85 00000025 BA24000000          <1>  mov edx, %4
    85                              <1>  %endif
    85                              <1>  %endif
    85                              <1>  %ifnum %3
    85                              <1>  %if %3 == 0
    85                              <1>  xor ecx, ecx
    85                              <1>  %elif %3 == -1
    85                              <1>  or ecx, -1
    85                              <1>  %else
    85                              <1>  mov ecx, %3
    85                              <1>  %endif
    85                              <1>  %elifnidni %3, ecx
    85 0000002A B9[2F000000]        <1>  mov ecx, %3
    85                              <1>  %endif
    85                              <1>  %endif
    85                              <1>  %ifnum %2
    85                              <1>  %if %2 == 0
    85                              <1>  xor ebx, ebx
    85                              <1>  %elif %2 == -1
    85                              <1>  or ebx, -1
    85                              <1>  %else
    85 0000002F BB01000000          <1>  mov ebx, %2
    85                              <1>  %endif
    85                              <1>  %elifnidni %2, ebx
    85                              <1>  mov ebx, %2
    85                              <1>  %endif
    85                              <1>  %endif
    85 00000034 B804000000          <1>  mov eax, SYS_ %+ %1
    85 00000039 CD80                <1>  int 0x80
    85                              <1> %else
    85                              <1>  int 0x80
    85                              <1> %endif
    86                                  .ok_exit:
    87                                  	syscall	close, ebp
    87                              <1> %if %0 > 0
    87                              <1>  %if %0 > 1
    87                              <1>  %if %0 > 2
    87                              <1>  %if %0 > 3
    87                              <1>  %if %0 > 4
    87                              <1>  %if %0 > 5
    87                              <1>  %ifnum %6
    87                              <1>  %if %6 == 0
    87                              <1>  xor edi, edi
    87                              <1>  %elif %6 == -1
    87                              <1>  or edi, -1
    87                              <1>  %else
    87                              <1>  mov edi, %6
    87                              <1>  %endif
    87                              <1>  %elifnidni %6, edi
    87                              <1>  mov edi, %6
    87                              <1>  %endif
    87                              <1>  %endif
    87                              <1>  %ifnum %5
    87                              <1>  %if %5 == 0
    87                              <1>  xor esi, esi
    87                              <1>  %elif %5 == -1
    87                              <1>  or esi, -1
    87                              <1>  %else
    87                              <1>  mov esi, %5
    87                              <1>  %endif
    87                              <1>  %elifnidni %5, esi
    87                              <1>  mov esi, %5
    87                              <1>  %endif
    87                              <1>  %endif
    87                              <1>  %ifnum %4
    87                              <1>  %if %4 == 0
    87                              <1>  xor edx, edx
    87                              <1>  %elif %4 == -1
    87                              <1>  or edx, -1
    87                              <1>  %else
    87                              <1>  mov edx, %4
    87                              <1>  %endif
    87                              <1>  %elifnidni %4, edx
    87                              <1>  mov edx, %4
    87                              <1>  %endif
    87                              <1>  %endif
    87                              <1>  %ifnum %3
    87                              <1>  %if %3 == 0
    87                              <1>  xor ecx, ecx
    87                              <1>  %elif %3 == -1
    87                              <1>  or ecx, -1
    87                              <1>  %else
    87                              <1>  mov ecx, %3
    87                              <1>  %endif
    87                              <1>  %elifnidni %3, ecx
    87                              <1>  mov ecx, %3
    87                              <1>  %endif
    87                              <1>  %endif
    87                              <1>  %ifnum %2
    87                              <1>  %if %2 == 0
    87                              <1>  xor ebx, ebx
    87                              <1>  %elif %2 == -1
    87                              <1>  or ebx, -1
    87                              <1>  %else
    87                              <1>  mov ebx, %2
    87                              <1>  %endif
    87                              <1>  %elifnidni %2, ebx
    87 0000003B 89EB                <1>  mov ebx, %2
    87                              <1>  %endif
    87                              <1>  %endif
    87 0000003D B806000000          <1>  mov eax, SYS_ %+ %1
    87 00000042 CD80                <1>  int 0x80
    87                              <1> %else
    87                              <1>  int 0x80
    87                              <1> %endif
    88                                  	syscall	exit, 0
    88                              <1> %if %0 > 0
    88                              <1>  %if %0 > 1
    88                              <1>  %if %0 > 2
    88                              <1>  %if %0 > 3
    88                              <1>  %if %0 > 4
    88                              <1>  %if %0 > 5
    88                              <1>  %ifnum %6
    88                              <1>  %if %6 == 0
    88                              <1>  xor edi, edi
    88                              <1>  %elif %6 == -1
    88                              <1>  or edi, -1
    88                              <1>  %else
    88                              <1>  mov edi, %6
    88                              <1>  %endif
    88                              <1>  %elifnidni %6, edi
    88                              <1>  mov edi, %6
    88                              <1>  %endif
    88                              <1>  %endif
    88                              <1>  %ifnum %5
    88                              <1>  %if %5 == 0
    88                              <1>  xor esi, esi
    88                              <1>  %elif %5 == -1
    88                              <1>  or esi, -1
    88                              <1>  %else
    88                              <1>  mov esi, %5
    88                              <1>  %endif
    88                              <1>  %elifnidni %5, esi
    88                              <1>  mov esi, %5
    88                              <1>  %endif
    88                              <1>  %endif
    88                              <1>  %ifnum %4
    88                              <1>  %if %4 == 0
    88                              <1>  xor edx, edx
    88                              <1>  %elif %4 == -1
    88                              <1>  or edx, -1
    88                              <1>  %else
    88                              <1>  mov edx, %4
    88                              <1>  %endif
    88                              <1>  %elifnidni %4, edx
    88                              <1>  mov edx, %4
    88                              <1>  %endif
    88                              <1>  %endif
    88                              <1>  %ifnum %3
    88                              <1>  %if %3 == 0
    88                              <1>  xor ecx, ecx
    88                              <1>  %elif %3 == -1
    88                              <1>  or ecx, -1
    88                              <1>  %else
    88                              <1>  mov ecx, %3
    88                              <1>  %endif
    88                              <1>  %elifnidni %3, ecx
    88                              <1>  mov ecx, %3
    88                              <1>  %endif
    88                              <1>  %endif
    88                              <1>  %ifnum %2
    88                              <1>  %if %2 == 0
    88 00000044 31DB                <1>  xor ebx, ebx
    88                              <1>  %elif %2 == -1
    88                              <1>  or ebx, -1
    88                              <1>  %else
    88                              <1>  mov ebx, %2
    88                              <1>  %endif
    88                              <1>  %elifnidni %2, ebx
    88                              <1>  mov ebx, %2
    88                              <1>  %endif
    88                              <1>  %endif
    88 00000046 B801000000          <1>  mov eax, SYS_ %+ %1
    88 0000004B CD80                <1>  int 0x80
    88                              <1> %else
    88                              <1>  int 0x80
    88                              <1> %endif
    89                                  .ok:
    90 0000004D C705[08000000]60EA-     	mov	dword[timeout], TIMEOUT
    90 00000055 0000               
    91 00000057 58                      	pop	eax							;arg 0 - program name
    92 00000058 58                      	pop	eax
    93 00000059 80382D                  	cmp	byte[eax], '-'				;-t
    94 0000005C 7523                    	jnz	.hostname
    95 0000005E 83EB02                  	sub	ebx,2
    96 00000061 76A1                    	jbe	.usage
    97 00000063 5E                      	pop	esi							;timeout in ms
    98 00000064 53                      	push	ebx
    99 00000065 31DB                    	xor	ebx,ebx
   100 00000067 31C0                    	xor 	eax,eax
   101                                  .next_digit:
   102 00000069 AC                      	lodsb
   103 0000006A 2C30                    	sub	al,'0'
   104 0000006C 720B                    	jb	.done
   105 0000006E 3C09                    	cmp	al,9
   106 00000070 7707                    	ja	.done
   107 00000072 6BDB0A                  	imul	ebx,byte 10
   108 00000075 01C3                    	add	ebx,eax
   109 00000077 EBF0                    	jmp	.next_digit
   110                                  .done:
   111 00000079 891D[08000000]          	mov	dword[timeout], ebx
   112 0000007F 5B                      	pop	ebx
   113 00000080 58                      	pop	eax							;next arg (hostname)
   114                                  .hostname:
   115 00000081 A3[00000000]            	mov	dword[hostname], eax
   116 00000086 4B                      	dec	ebx
   117 00000087 7406                    	jz	.find_server_ip
   118 00000089 8F05[04000000]          	pop	dword[server_ip]
   119                                  .find_server_ip:
   120 0000008F 8B35[04000000]          	mov	esi,[server_ip]
   121 00000095 09F6                    	or	esi,esi	
   122 00000097 750E                    	jnz	.has_server
   123 00000099 E83D020000              	call	find_server_ip				;result string in ESI
   124 0000009E 09F6                    	or	esi,esi
   125 000000A0 7505                    	jnz	.has_server
   126 000000A2 E975FFFFFF              	jmp	.exit						;no server, give up
   127                                  .has_server:
   128 000000A7 E87C010000              	call	parse_request				;fill in a DNS request
   129 000000AC BF[40020000]            	mov	edi,sockaddr_in
   130 000000B1 E850010000              	call	ip2int						;fill in sin_addr.s_addr 
   131 000000B6 B335                    	mov	bl,DNS_PORT
   132 000000B8 C70702000000            	mov	dword[edi], AF_INET | (IPPROTO_IP << 16)		;fill in sin_family and sin_port
   133 000000BE 885F03                  	mov 	byte[edi+3],bl
   134                                  	syscall	socket,PF_INET, SOCK_DGRAM, IPPROTO_IP			;create raw socket (UDP)
   134                              <1> %if %0 > 0
   134                              <1>  %if %0 > 1
   134                              <1>  %if %0 > 2
   134                              <1>  %if %0 > 3
   134                              <1>  %if %0 > 4
   134                              <1>  %if %0 > 5
   134                              <1>  %ifnum %6
   134                              <1>  %if %6 == 0
   134                              <1>  xor edi, edi
   134                              <1>  %elif %6 == -1
   134                              <1>  or edi, -1
   134                              <1>  %else
   134                              <1>  mov edi, %6
   134                              <1>  %endif
   134                              <1>  %elifnidni %6, edi
   134                              <1>  mov edi, %6
   134                              <1>  %endif
   134                              <1>  %endif
   134                              <1>  %ifnum %5
   134                              <1>  %if %5 == 0
   134                              <1>  xor esi, esi
   134                              <1>  %elif %5 == -1
   134                              <1>  or esi, -1
   134                              <1>  %else
   134                              <1>  mov esi, %5
   134                              <1>  %endif
   134                              <1>  %elifnidni %5, esi
   134                              <1>  mov esi, %5
   134                              <1>  %endif
   134                              <1>  %endif
   134                              <1>  %ifnum %4
   134                              <1>  %if %4 == 0
   134 000000C1 31D2                <1>  xor edx, edx
   134                              <1>  %elif %4 == -1
   134                              <1>  or edx, -1
   134                              <1>  %else
   134                              <1>  mov edx, %4
   134                              <1>  %endif
   134                              <1>  %elifnidni %4, edx
   134                              <1>  mov edx, %4
   134                              <1>  %endif
   134                              <1>  %endif
   134                              <1>  %ifnum %3
   134                              <1>  %if %3 == 0
   134                              <1>  xor ecx, ecx
   134                              <1>  %elif %3 == -1
   134                              <1>  or ecx, -1
   134                              <1>  %else
   134 000000C3 B902000000          <1>  mov ecx, %3
   134                              <1>  %endif
   134                              <1>  %elifnidni %3, ecx
   134                              <1>  mov ecx, %3
   134                              <1>  %endif
   134                              <1>  %endif
   134                              <1>  %ifnum %2
   134                              <1>  %if %2 == 0
   134                              <1>  xor ebx, ebx
   134                              <1>  %elif %2 == -1
   134                              <1>  or ebx, -1
   134                              <1>  %else
   134 000000C8 BB02000000          <1>  mov ebx, %2
   134                              <1>  %endif
   134                              <1>  %elifnidni %2, ebx
   134                              <1>  mov ebx, %2
   134                              <1>  %endif
   134                              <1>  %endif
   134 000000CD B867010000          <1>  mov eax, SYS_ %+ %1
   134 000000D2 CD80                <1>  int 0x80
   134                              <1> %else
   134                              <1>  int 0x80
   134                              <1> %endif
   135 000000D4 85C0                    	test	eax,eax									
   136                                  .ex_help:
   137 000000D6 0F8840FFFFFF            	js	near .exit
   138                                  
   139 000000DC 89C5                    	mov	ebp, eax					;save socket descriptor
   140 000000DE 6A10                    	push 	byte 0x10
   141 000000E0 89E7                    	mov 	edi,esp
   142                                          syscall	setsockopt, eax,SOL_IP,IP_TOS,esp,4		
   142                              <1> %if %0 > 0
   142                              <1>  %if %0 > 1
   142                              <1>  %if %0 > 2
   142                              <1>  %if %0 > 3
   142                              <1>  %if %0 > 4
   142                              <1>  %if %0 > 5
   142                              <1>  %ifnum %6
   142                              <1>  %if %6 == 0
   142                              <1>  xor edi, edi
   142                              <1>  %elif %6 == -1
   142                              <1>  or edi, -1
   142                              <1>  %else
   142 000000E2 BF04000000          <1>  mov edi, %6
   142                              <1>  %endif
   142                              <1>  %elifnidni %6, edi
   142                              <1>  mov edi, %6
   142                              <1>  %endif
   142                              <1>  %endif
   142                              <1>  %ifnum %5
   142                              <1>  %if %5 == 0
   142                              <1>  xor esi, esi
   142                              <1>  %elif %5 == -1
   142                              <1>  or esi, -1
   142                              <1>  %else
   142                              <1>  mov esi, %5
   142                              <1>  %endif
   142                              <1>  %elifnidni %5, esi
   142 000000E7 89E6                <1>  mov esi, %5
   142                              <1>  %endif
   142                              <1>  %endif
   142                              <1>  %ifnum %4
   142                              <1>  %if %4 == 0
   142                              <1>  xor edx, edx
   142                              <1>  %elif %4 == -1
   142                              <1>  or edx, -1
   142                              <1>  %else
   142 000000E9 BA01000000          <1>  mov edx, %4
   142                              <1>  %endif
   142                              <1>  %elifnidni %4, edx
   142                              <1>  mov edx, %4
   142                              <1>  %endif
   142                              <1>  %endif
   142                              <1>  %ifnum %3
   142                              <1>  %if %3 == 0
   142 000000EE 31C9                <1>  xor ecx, ecx
   142                              <1>  %elif %3 == -1
   142                              <1>  or ecx, -1
   142                              <1>  %else
   142                              <1>  mov ecx, %3
   142                              <1>  %endif
   142                              <1>  %elifnidni %3, ecx
   142                              <1>  mov ecx, %3
   142                              <1>  %endif
   142                              <1>  %endif
   142                              <1>  %ifnum %2
   142                              <1>  %if %2 == 0
   142                              <1>  xor ebx, ebx
   142                              <1>  %elif %2 == -1
   142                              <1>  or ebx, -1
   142                              <1>  %else
   142                              <1>  mov ebx, %2
   142                              <1>  %endif
   142                              <1>  %elifnidni %2, ebx
   142 000000F0 89C3                <1>  mov ebx, %2
   142                              <1>  %endif
   142                              <1>  %endif
   142 000000F2 B86E010000          <1>  mov eax, SYS_ %+ %1
   142 000000F7 CD80                <1>  int 0x80
   142                              <1> %else
   142                              <1>  int 0x80
   142                              <1> %endif
   143 000000F9 85C0                    	test	eax,eax									
   144 000000FB 58                      	pop 	eax
   145 000000FC 78D8                    	js	.ex_help
   146                                  	syscall connect, ebp,sockaddr_in,16
   146                              <1> %if %0 > 0
   146                              <1>  %if %0 > 1
   146                              <1>  %if %0 > 2
   146                              <1>  %if %0 > 3
   146                              <1>  %if %0 > 4
   146                              <1>  %if %0 > 5
   146                              <1>  %ifnum %6
   146                              <1>  %if %6 == 0
   146                              <1>  xor edi, edi
   146                              <1>  %elif %6 == -1
   146                              <1>  or edi, -1
   146                              <1>  %else
   146                              <1>  mov edi, %6
   146                              <1>  %endif
   146                              <1>  %elifnidni %6, edi
   146                              <1>  mov edi, %6
   146                              <1>  %endif
   146                              <1>  %endif
   146                              <1>  %ifnum %5
   146                              <1>  %if %5 == 0
   146                              <1>  xor esi, esi
   146                              <1>  %elif %5 == -1
   146                              <1>  or esi, -1
   146                              <1>  %else
   146                              <1>  mov esi, %5
   146                              <1>  %endif
   146                              <1>  %elifnidni %5, esi
   146                              <1>  mov esi, %5
   146                              <1>  %endif
   146                              <1>  %endif
   146                              <1>  %ifnum %4
   146                              <1>  %if %4 == 0
   146                              <1>  xor edx, edx
   146                              <1>  %elif %4 == -1
   146                              <1>  or edx, -1
   146                              <1>  %else
   146 000000FE BA10000000          <1>  mov edx, %4
   146                              <1>  %endif
   146                              <1>  %elifnidni %4, edx
   146                              <1>  mov edx, %4
   146                              <1>  %endif
   146                              <1>  %endif
   146                              <1>  %ifnum %3
   146                              <1>  %if %3 == 0
   146                              <1>  xor ecx, ecx
   146                              <1>  %elif %3 == -1
   146                              <1>  or ecx, -1
   146                              <1>  %else
   146                              <1>  mov ecx, %3
   146                              <1>  %endif
   146                              <1>  %elifnidni %3, ecx
   146 00000103 B9[40020000]        <1>  mov ecx, %3
   146                              <1>  %endif
   146                              <1>  %endif
   146                              <1>  %ifnum %2
   146                              <1>  %if %2 == 0
   146                              <1>  xor ebx, ebx
   146                              <1>  %elif %2 == -1
   146                              <1>  or ebx, -1
   146                              <1>  %else
   146                              <1>  mov ebx, %2
   146                              <1>  %endif
   146                              <1>  %elifnidni %2, ebx
   146 00000108 89EB                <1>  mov ebx, %2
   146                              <1>  %endif
   146                              <1>  %endif
   146 0000010A B86A010000          <1>  mov eax, SYS_ %+ %1
   146 0000010F CD80                <1>  int 0x80
   146                              <1> %else
   146                              <1>  int 0x80
   146                              <1> %endif
   147 00000111 85C0                    	test	eax,eax									
   148 00000113 78C1                    	js	.ex_help	
   149                                  	syscall setsockopt, ebp, 0x1,0xa, esp, 4
   149                              <1> %if %0 > 0
   149                              <1>  %if %0 > 1
   149                              <1>  %if %0 > 2
   149                              <1>  %if %0 > 3
   149                              <1>  %if %0 > 4
   149                              <1>  %if %0 > 5
   149                              <1>  %ifnum %6
   149                              <1>  %if %6 == 0
   149                              <1>  xor edi, edi
   149                              <1>  %elif %6 == -1
   149                              <1>  or edi, -1
   149                              <1>  %else
   149 00000115 BF04000000          <1>  mov edi, %6
   149                              <1>  %endif
   149                              <1>  %elifnidni %6, edi
   149                              <1>  mov edi, %6
   149                              <1>  %endif
   149                              <1>  %endif
   149                              <1>  %ifnum %5
   149                              <1>  %if %5 == 0
   149                              <1>  xor esi, esi
   149                              <1>  %elif %5 == -1
   149                              <1>  or esi, -1
   149                              <1>  %else
   149                              <1>  mov esi, %5
   149                              <1>  %endif
   149                              <1>  %elifnidni %5, esi
   149 0000011A 89E6                <1>  mov esi, %5
   149                              <1>  %endif
   149                              <1>  %endif
   149                              <1>  %ifnum %4
   149                              <1>  %if %4 == 0
   149                              <1>  xor edx, edx
   149                              <1>  %elif %4 == -1
   149                              <1>  or edx, -1
   149                              <1>  %else
   149 0000011C BA0A000000          <1>  mov edx, %4
   149                              <1>  %endif
   149                              <1>  %elifnidni %4, edx
   149                              <1>  mov edx, %4
   149                              <1>  %endif
   149                              <1>  %endif
   149                              <1>  %ifnum %3
   149                              <1>  %if %3 == 0
   149                              <1>  xor ecx, ecx
   149                              <1>  %elif %3 == -1
   149                              <1>  or ecx, -1
   149                              <1>  %else
   149 00000121 B901000000          <1>  mov ecx, %3
   149                              <1>  %endif
   149                              <1>  %elifnidni %3, ecx
   149                              <1>  mov ecx, %3
   149                              <1>  %endif
   149                              <1>  %endif
   149                              <1>  %ifnum %2
   149                              <1>  %if %2 == 0
   149                              <1>  xor ebx, ebx
   149                              <1>  %elif %2 == -1
   149                              <1>  or ebx, -1
   149                              <1>  %else
   149                              <1>  mov ebx, %2
   149                              <1>  %endif
   149                              <1>  %elifnidni %2, ebx
   149 00000126 89EB                <1>  mov ebx, %2
   149                              <1>  %endif
   149                              <1>  %endif
   149 00000128 B86E010000          <1>  mov eax, SYS_ %+ %1
   149 0000012D CD80                <1>  int 0x80
   149                              <1> %else
   149                              <1>  int 0x80
   149                              <1> %endif
   150 0000012F 85C0                    	test	eax,eax									
   151 00000131 58                      	pop 	eax
   152 00000132 78A2                    	js	.ex_help
   153                                  	syscall ioctl, ebp, FIONBIO, esp
   153                              <1> %if %0 > 0
   153                              <1>  %if %0 > 1
   153                              <1>  %if %0 > 2
   153                              <1>  %if %0 > 3
   153                              <1>  %if %0 > 4
   153                              <1>  %if %0 > 5
   153                              <1>  %ifnum %6
   153                              <1>  %if %6 == 0
   153                              <1>  xor edi, edi
   153                              <1>  %elif %6 == -1
   153                              <1>  or edi, -1
   153                              <1>  %else
   153                              <1>  mov edi, %6
   153                              <1>  %endif
   153                              <1>  %elifnidni %6, edi
   153                              <1>  mov edi, %6
   153                              <1>  %endif
   153                              <1>  %endif
   153                              <1>  %ifnum %5
   153                              <1>  %if %5 == 0
   153                              <1>  xor esi, esi
   153                              <1>  %elif %5 == -1
   153                              <1>  or esi, -1
   153                              <1>  %else
   153                              <1>  mov esi, %5
   153                              <1>  %endif
   153                              <1>  %elifnidni %5, esi
   153                              <1>  mov esi, %5
   153                              <1>  %endif
   153                              <1>  %endif
   153                              <1>  %ifnum %4
   153                              <1>  %if %4 == 0
   153                              <1>  xor edx, edx
   153                              <1>  %elif %4 == -1
   153                              <1>  or edx, -1
   153                              <1>  %else
   153                              <1>  mov edx, %4
   153                              <1>  %endif
   153                              <1>  %elifnidni %4, edx
   153 00000134 89E2                <1>  mov edx, %4
   153                              <1>  %endif
   153                              <1>  %endif
   153                              <1>  %ifnum %3
   153                              <1>  %if %3 == 0
   153                              <1>  xor ecx, ecx
   153                              <1>  %elif %3 == -1
   153                              <1>  or ecx, -1
   153                              <1>  %else
   153 00000136 B921540000          <1>  mov ecx, %3
   153                              <1>  %endif
   153                              <1>  %elifnidni %3, ecx
   153                              <1>  mov ecx, %3
   153                              <1>  %endif
   153                              <1>  %endif
   153                              <1>  %ifnum %2
   153                              <1>  %if %2 == 0
   153                              <1>  xor ebx, ebx
   153                              <1>  %elif %2 == -1
   153                              <1>  or ebx, -1
   153                              <1>  %else
   153                              <1>  mov ebx, %2
   153                              <1>  %endif
   153                              <1>  %elifnidni %2, ebx
   153 0000013B 89EB                <1>  mov ebx, %2
   153                              <1>  %endif
   153                              <1>  %endif
   153 0000013D B836000000          <1>  mov eax, SYS_ %+ %1
   153 00000142 CD80                <1>  int 0x80
   153                              <1> %else
   153                              <1>  int 0x80
   153                              <1> %endif
   154 00000144 85C0                    	test	eax,eax									
   155 00000146 58                      	pop 	eax
   156 00000147 0F88CFFEFFFF            	js	near .exit
   157                                  ;.send_query:
   158 0000014D 31D2                    	xor	edx,edx
   159 0000014F 668B15[2A000000]        	mov	dx,[dns_q.size]
   160 00000156 86F2                    	xchg	dh,dl
   161                                  	syscall write, ebp,dns_q+2,edx		;in UDP, we only send the request
   161                              <1> %if %0 > 0
   161                              <1>  %if %0 > 1
   161                              <1>  %if %0 > 2
   161                              <1>  %if %0 > 3
   161                              <1>  %if %0 > 4
   161                              <1>  %if %0 > 5
   161                              <1>  %ifnum %6
   161                              <1>  %if %6 == 0
   161                              <1>  xor edi, edi
   161                              <1>  %elif %6 == -1
   161                              <1>  or edi, -1
   161                              <1>  %else
   161                              <1>  mov edi, %6
   161                              <1>  %endif
   161                              <1>  %elifnidni %6, edi
   161                              <1>  mov edi, %6
   161                              <1>  %endif
   161                              <1>  %endif
   161                              <1>  %ifnum %5
   161                              <1>  %if %5 == 0
   161                              <1>  xor esi, esi
   161                              <1>  %elif %5 == -1
   161                              <1>  or esi, -1
   161                              <1>  %else
   161                              <1>  mov esi, %5
   161                              <1>  %endif
   161                              <1>  %elifnidni %5, esi
   161                              <1>  mov esi, %5
   161                              <1>  %endif
   161                              <1>  %endif
   161                              <1>  %ifnum %4
   161                              <1>  %if %4 == 0
   161                              <1>  xor edx, edx
   161                              <1>  %elif %4 == -1
   161                              <1>  or edx, -1
   161                              <1>  %else
   161                              <1>  mov edx, %4
   161                              <1>  %endif
   161                              <1>  %elifnidni %4, edx
   161                              <1>  mov edx, %4
   161                              <1>  %endif
   161                              <1>  %endif
   161                              <1>  %ifnum %3
   161                              <1>  %if %3 == 0
   161                              <1>  xor ecx, ecx
   161                              <1>  %elif %3 == -1
   161                              <1>  or ecx, -1
   161                              <1>  %else
   161                              <1>  mov ecx, %3
   161                              <1>  %endif
   161                              <1>  %elifnidni %3, ecx
   161 00000158 B9[2C000000]        <1>  mov ecx, %3
   161                              <1>  %endif
   161                              <1>  %endif
   161                              <1>  %ifnum %2
   161                              <1>  %if %2 == 0
   161                              <1>  xor ebx, ebx
   161                              <1>  %elif %2 == -1
   161                              <1>  or ebx, -1
   161                              <1>  %else
   161                              <1>  mov ebx, %2
   161                              <1>  %endif
   161                              <1>  %elifnidni %2, ebx
   161 0000015D 89EB                <1>  mov ebx, %2
   161                              <1>  %endif
   161                              <1>  %endif
   161 0000015F B804000000          <1>  mov eax, SYS_ %+ %1
   161 00000164 CD80                <1>  int 0x80
   161                              <1> %else
   161                              <1>  int 0x80
   161                              <1> %endif
   162                                  .fd_setup:
   163 00000166 892D[38020000]          	mov 	dword[poll.fd1],ebp
   164 0000016C 66B80300                	mov	ax, EPOLLIN | EPOLLPRI
   165 00000170 66A3[3C020000]          	mov	word[poll.e1],ax
   166 00000176 8B15[08000000]          	mov	edx, dword[timeout]			; third arg is the timeout
   167                                  	syscall poll, poll,1
   167                              <1> %if %0 > 0
   167                              <1>  %if %0 > 1
   167                              <1>  %if %0 > 2
   167                              <1>  %if %0 > 3
   167                              <1>  %if %0 > 4
   167                              <1>  %if %0 > 5
   167                              <1>  %ifnum %6
   167                              <1>  %if %6 == 0
   167                              <1>  xor edi, edi
   167                              <1>  %elif %6 == -1
   167                              <1>  or edi, -1
   167                              <1>  %else
   167                              <1>  mov edi, %6
   167                              <1>  %endif
   167                              <1>  %elifnidni %6, edi
   167                              <1>  mov edi, %6
   167                              <1>  %endif
   167                              <1>  %endif
   167                              <1>  %ifnum %5
   167                              <1>  %if %5 == 0
   167                              <1>  xor esi, esi
   167                              <1>  %elif %5 == -1
   167                              <1>  or esi, -1
   167                              <1>  %else
   167                              <1>  mov esi, %5
   167                              <1>  %endif
   167                              <1>  %elifnidni %5, esi
   167                              <1>  mov esi, %5
   167                              <1>  %endif
   167                              <1>  %endif
   167                              <1>  %ifnum %4
   167                              <1>  %if %4 == 0
   167                              <1>  xor edx, edx
   167                              <1>  %elif %4 == -1
   167                              <1>  or edx, -1
   167                              <1>  %else
   167                              <1>  mov edx, %4
   167                              <1>  %endif
   167                              <1>  %elifnidni %4, edx
   167                              <1>  mov edx, %4
   167                              <1>  %endif
   167                              <1>  %endif
   167                              <1>  %ifnum %3
   167                              <1>  %if %3 == 0
   167                              <1>  xor ecx, ecx
   167                              <1>  %elif %3 == -1
   167                              <1>  or ecx, -1
   167                              <1>  %else
   167 0000017C B901000000          <1>  mov ecx, %3
   167                              <1>  %endif
   167                              <1>  %elifnidni %3, ecx
   167                              <1>  mov ecx, %3
   167                              <1>  %endif
   167                              <1>  %endif
   167                              <1>  %ifnum %2
   167                              <1>  %if %2 == 0
   167                              <1>  xor ebx, ebx
   167                              <1>  %elif %2 == -1
   167                              <1>  or ebx, -1
   167                              <1>  %else
   167                              <1>  mov ebx, %2
   167                              <1>  %endif
   167                              <1>  %elifnidni %2, ebx
   167 00000181 BB[38020000]        <1>  mov ebx, %2
   167                              <1>  %endif
   167                              <1>  %endif
   167 00000186 B8A8000000          <1>  mov eax, SYS_ %+ %1
   167 0000018B CD80                <1>  int 0x80
   167                              <1> %else
   167                              <1>  int 0x80
   167                              <1> %endif
   168 0000018D 66F705[3E020000]03-     	test 	word[poll.re1], EPOLLIN | EPOLLPRI
   168 00000195 00                 
   169 00000196 7505                    	jnz 	.we_have_mail
   170 00000198 E97FFEFFFF              	jmp 	.exit
   171                                  .we_have_mail:
   172 0000019D BE[2A000000]            	mov 	esi,dns_q
   173                                  	syscall read, ebp,esi,BUFF_SIZE
   173                              <1> %if %0 > 0
   173                              <1>  %if %0 > 1
   173                              <1>  %if %0 > 2
   173                              <1>  %if %0 > 3
   173                              <1>  %if %0 > 4
   173                              <1>  %if %0 > 5
   173                              <1>  %ifnum %6
   173                              <1>  %if %6 == 0
   173                              <1>  xor edi, edi
   173                              <1>  %elif %6 == -1
   173                              <1>  or edi, -1
   173                              <1>  %else
   173                              <1>  mov edi, %6
   173                              <1>  %endif
   173                              <1>  %elifnidni %6, edi
   173                              <1>  mov edi, %6
   173                              <1>  %endif
   173                              <1>  %endif
   173                              <1>  %ifnum %5
   173                              <1>  %if %5 == 0
   173                              <1>  xor esi, esi
   173                              <1>  %elif %5 == -1
   173                              <1>  or esi, -1
   173                              <1>  %else
   173                              <1>  mov esi, %5
   173                              <1>  %endif
   173                              <1>  %elifnidni %5, esi
   173                              <1>  mov esi, %5
   173                              <1>  %endif
   173                              <1>  %endif
   173                              <1>  %ifnum %4
   173                              <1>  %if %4 == 0
   173                              <1>  xor edx, edx
   173                              <1>  %elif %4 == -1
   173                              <1>  or edx, -1
   173                              <1>  %else
   173 000001A2 BA00020000          <1>  mov edx, %4
   173                              <1>  %endif
   173                              <1>  %elifnidni %4, edx
   173                              <1>  mov edx, %4
   173                              <1>  %endif
   173                              <1>  %endif
   173                              <1>  %ifnum %3
   173                              <1>  %if %3 == 0
   173                              <1>  xor ecx, ecx
   173                              <1>  %elif %3 == -1
   173                              <1>  or ecx, -1
   173                              <1>  %else
   173                              <1>  mov ecx, %3
   173                              <1>  %endif
   173                              <1>  %elifnidni %3, ecx
   173 000001A7 89F1                <1>  mov ecx, %3
   173                              <1>  %endif
   173                              <1>  %endif
   173                              <1>  %ifnum %2
   173                              <1>  %if %2 == 0
   173                              <1>  xor ebx, ebx
   173                              <1>  %elif %2 == -1
   173                              <1>  or ebx, -1
   173                              <1>  %else
   173                              <1>  mov ebx, %2
   173                              <1>  %endif
   173                              <1>  %elifnidni %2, ebx
   173 000001A9 89EB                <1>  mov ebx, %2
   173                              <1>  %endif
   173                              <1>  %endif
   173 000001AB B803000000          <1>  mov eax, SYS_ %+ %1
   173 000001B0 CD80                <1>  int 0x80
   173                              <1> %else
   173                              <1>  int 0x80
   173                              <1> %endif
   174 000001B2 09C0                    	or	eax,eax
   175 000001B4 744B                    	jz 	.do_exit
   176                                  	;we have DNS packet in esi
   177 000001B6 66A1[30000000]          	mov	ax,[dns_q.qd]
   178 000001BC 86E0                    	xchg	ah,al
   179 000001BE 6609C0                  	or	ax,ax
   180 000001C1 740D                    	jz	.do_not_have_qs 			;we usally have such fieled
   181 000001C3 BE[38000000]            	mov	esi,dns_q.qname_b
   182                                  .next:									;try to find end of our query
   183 000001C8 AC                      	lodsb	
   184 000001C9 08C0                    	or 	al,al
   185 000001CB 75FB                    	jnz	.next
   186 000001CD 83C604                  	add	esi,4	
   187                                  .do_not_have_qs:						;answer section follows
   188                                  .next2:
   189 000001D0 AC                      	lodsb							;again host name or CNAME
   190 000001D1 08C0                    	or	al,al
   191 000001D3 75FB                    	jnz	.next2
   192                                  .next3:
   193 000001D5 AC                      	lodsb
   194 000001D6 08C0                    	or	al,al
   195 000001D8 74FB                    	jz	.next3 		;Uncompressed name one byte more
   196 000001DA 3C01                    	cmp	al,1		;ok it is IN - so we jump to IP grab
   197 000001DC 7414                    	jz	.ok_print
   198 000001DE 3C05                    	cmp	al,5		; the domain is alias it is CNAME
   199 000001E0 751F                    	jnz	.do_exit
   200 000001E2 83C606                  	add	esi,6		;skip a CNAME section
   201 000001E5 31C0                    	xor	eax,eax
   202 000001E7 668B06                  	mov	ax,[esi]
   203 000001EA 86E0                    	xchg	ah,al	
   204 000001EC 01C6                    	add 	esi,eax
   205 000001EE 46                      	inc	esi
   206 000001EF 46                      	inc 	esi
   207 000001F0 EBDE                    	jmp 	.next2		;next field - treat as another entry 
   208                                  .ok_print:
   209 000001F2 83C607                  	add	esi,7
   210 000001F5 AC                      	lodsb	
   211 000001F6 3C04                    	cmp 	al,4		;IP should have 4 bytes
   212 000001F8 7507                    	jnz	.do_exit
   213 000001FA 8B06                    	mov	eax,[esi] ;RESOLVED IP is HERE
   214 000001FC E886000000              	call	print_ip
   215                                  .do_exit:
   216 00000201 E916FEFFFF              	jmp 	.exit
   217                                  
   218                                  ;function ip2int - converts IP number in dotted 4 notation pointed to by esi, to int32 in edi+ecx+4
   219                                  
   220                                  ip2int:
   221 00000206 31C0                    	xor	eax,eax
   222 00000208 31D2                    	xor	edx,edx
   223 0000020A 31C9                    	xor	ecx,ecx	
   224                                  .cc:	
   225 0000020C 31DB                    	xor	ebx,ebx
   226                                  .c:	
   227 0000020E 8A0416                  	mov	al,[esi+edx]
   228 00000211 42                      	inc	edx
   229 00000212 2C30                    	sub	al,'0'
   230 00000214 7207                    	jb	.next
   231 00000216 6BDB0A                  	imul	ebx,byte 10
   232 00000219 01C3                    	add	ebx,eax
   233 0000021B EBF1                    	jmp	short .c	
   234                                  .next:
   235 0000021D 885C0F04                	mov	[edi+ecx+4],bl
   236 00000221 41                      	inc	ecx
   237 00000222 83F904                  	cmp	ecx, byte 4
   238 00000225 75E5                    	jne	.cc
   239 00000227 C3                      	ret
   240                                  ;esi - user string
   241                                  
   242                                  parse_request:
   243 00000228 60                      	pusha
   244 00000229 8B35[00000000]          	mov	esi,[hostname]
   245 0000022F BF[38000000]            	mov 	edi,dns_q.qname_b
   246 00000234 57                      	push	edi
   247 00000235 47                      	inc	edi
   248                                  .name_start:
   249 00000236 31C9                    	xor 	ecx,ecx
   250 00000238 AC                      .name_loop:	lodsb
   251 00000239 08C0                    	or	al,al
   252 0000023B 740F                    	jz	.write_last
   253 0000023D 3C2E                    	cmp	al,'.'
   254 0000023F 7404                    	jz	.name_done
   255 00000241 41                      	inc 	ecx
   256 00000242 AA                      	stosb
   257 00000243 EBF3                    	jmp	.name_loop
   258                                  .name_done:	
   259 00000245 5B                      	pop	ebx	
   260 00000246 880B                    	mov 	[ebx],cl
   261 00000248 57                      	push 	edi
   262 00000249 47                      	inc	edi
   263 0000024A EBEA                    	jmp	.name_start
   264                                  .write_last:
   265 0000024C 31C0                    	xor 	eax,eax
   266 0000024E AA                      	stosb
   267 0000024F 40                      	inc	eax
   268 00000250 86C4                    	xchg	al,ah
   269 00000252 66AB                    	stosw
   270 00000254 66AB                    	stosw
   271 00000256 5B                      	pop	ebx
   272 00000257 880B                    	mov 	[ebx],cl
   273 00000259 81EF[2C000000]          	sub	edi,dns_q.id
   274 0000025F 89FA                    	mov	edx,edi
   275 00000261 86F2                    	xchg	dh,dl
   276 00000263 668915[2A000000]        	mov	[dns_q.size],dx
   277 0000026A 66C705[2C000000]52-     	mov	word[dns_q.id],'RM'
   277 00000272 4D                 
   278 00000273 66C705[30000000]00-     	mov	word[dns_q.qd],0x100
   278 0000027B 01                 
   279 0000027C 66C705[2E000000]01-     	mov	word[dns_q.comm],1
   279 00000284 00                 
   280 00000285 61                      	popa
   281 00000286 C3                      	ret
   282                                  print_ip:
   283 00000287 BF[20000000]            	mov 	edi,ipbuff+020
   284 0000028C 89FE                    	mov 	esi,edi
   285 0000028E 86E0                    	xchg 	ah,al	
   286 00000290 C1C810                  	ror 	eax,16
   287 00000293 86E0                    	xchg 	ah,al
   288 00000295 E814000000              	call 	i2ip
   289 0000029A 29FE                    	sub 	esi,edi
   290 0000029C 47                      	inc 	edi
   291                                  	syscall write, stdout,edi,esi
   291                              <1> %if %0 > 0
   291                              <1>  %if %0 > 1
   291                              <1>  %if %0 > 2
   291                              <1>  %if %0 > 3
   291                              <1>  %if %0 > 4
   291                              <1>  %if %0 > 5
   291                              <1>  %ifnum %6
   291                              <1>  %if %6 == 0
   291                              <1>  xor edi, edi
   291                              <1>  %elif %6 == -1
   291                              <1>  or edi, -1
   291                              <1>  %else
   291                              <1>  mov edi, %6
   291                              <1>  %endif
   291                              <1>  %elifnidni %6, edi
   291                              <1>  mov edi, %6
   291                              <1>  %endif
   291                              <1>  %endif
   291                              <1>  %ifnum %5
   291                              <1>  %if %5 == 0
   291                              <1>  xor esi, esi
   291                              <1>  %elif %5 == -1
   291                              <1>  or esi, -1
   291                              <1>  %else
   291                              <1>  mov esi, %5
   291                              <1>  %endif
   291                              <1>  %elifnidni %5, esi
   291                              <1>  mov esi, %5
   291                              <1>  %endif
   291                              <1>  %endif
   291                              <1>  %ifnum %4
   291                              <1>  %if %4 == 0
   291                              <1>  xor edx, edx
   291                              <1>  %elif %4 == -1
   291                              <1>  or edx, -1
   291                              <1>  %else
   291                              <1>  mov edx, %4
   291                              <1>  %endif
   291                              <1>  %elifnidni %4, edx
   291 0000029D 89F2                <1>  mov edx, %4
   291                              <1>  %endif
   291                              <1>  %endif
   291                              <1>  %ifnum %3
   291                              <1>  %if %3 == 0
   291                              <1>  xor ecx, ecx
   291                              <1>  %elif %3 == -1
   291                              <1>  or ecx, -1
   291                              <1>  %else
   291                              <1>  mov ecx, %3
   291                              <1>  %endif
   291                              <1>  %elifnidni %3, ecx
   291 0000029F 89F9                <1>  mov ecx, %3
   291                              <1>  %endif
   291                              <1>  %endif
   291                              <1>  %ifnum %2
   291                              <1>  %if %2 == 0
   291                              <1>  xor ebx, ebx
   291                              <1>  %elif %2 == -1
   291                              <1>  or ebx, -1
   291                              <1>  %else
   291 000002A1 BB01000000          <1>  mov ebx, %2
   291                              <1>  %endif
   291                              <1>  %elifnidni %2, ebx
   291                              <1>  mov ebx, %2
   291                              <1>  %endif
   291                              <1>  %endif
   291 000002A6 B804000000          <1>  mov eax, SYS_ %+ %1
   291 000002AB CD80                <1>  int 0x80
   291                              <1> %else
   291                              <1>  int 0x80
   291                              <1> %endif
   292 000002AD C3                      	ret
   293                                  i2ip:
   294 000002AE FD                      	std
   295 000002AF C6070A                  	mov 	byte[edi],10
   296 000002B2 4F                      	dec 	edi
   297                                  .next:	
   298 000002B3 89C3                    	mov 	ebx,eax
   299 000002B5 E80F000000              	call 	.conv
   300 000002BA 93                      	xchg 	eax,ebx
   301 000002BB B02E                    	mov 	al,'.'
   302 000002BD AA                      	stosb
   303 000002BE C1E808                  	shr 	eax,8
   304 000002C1 75F0                    	jnz 	.next
   305 000002C3 FC                      	cld
   306 000002C4 47                      	inc 	edi
   307 000002C5 C60720                  	mov 	byte[edi],' '
   308 000002C8 C3                      	ret
   309                                  .conv:
   310 000002C9 B10A                    	mov 	cl,010 ;hmm hope somone wont use hex IP
   311                                  .divide:
   312 000002CB 30E4                    	xor 	ah,ah	
   313 000002CD F6F1                    	div 	cl     ;ah=reminder
   314 000002CF 86E0                    	xchg	ah,al
   315 000002D1 0430                    	add 	al,'0'
   316 000002D3 AA                      	stosb	
   317 000002D4 86E0                    	xchg 	ah,al
   318 000002D6 08C0                    	or	al,al
   319 000002D8 75F1                    	jnz 	.divide
   320 000002DA C3                      	ret 
   321                                  find_server_ip:
   322                                  	syscall open,resolv,O_RDONLY
   322                              <1> %if %0 > 0
   322                              <1>  %if %0 > 1
   322                              <1>  %if %0 > 2
   322                              <1>  %if %0 > 3
   322                              <1>  %if %0 > 4
   322                              <1>  %if %0 > 5
   322                              <1>  %ifnum %6
   322                              <1>  %if %6 == 0
   322                              <1>  xor edi, edi
   322                              <1>  %elif %6 == -1
   322                              <1>  or edi, -1
   322                              <1>  %else
   322                              <1>  mov edi, %6
   322                              <1>  %endif
   322                              <1>  %elifnidni %6, edi
   322                              <1>  mov edi, %6
   322                              <1>  %endif
   322                              <1>  %endif
   322                              <1>  %ifnum %5
   322                              <1>  %if %5 == 0
   322                              <1>  xor esi, esi
   322                              <1>  %elif %5 == -1
   322                              <1>  or esi, -1
   322                              <1>  %else
   322                              <1>  mov esi, %5
   322                              <1>  %endif
   322                              <1>  %elifnidni %5, esi
   322                              <1>  mov esi, %5
   322                              <1>  %endif
   322                              <1>  %endif
   322                              <1>  %ifnum %4
   322                              <1>  %if %4 == 0
   322                              <1>  xor edx, edx
   322                              <1>  %elif %4 == -1
   322                              <1>  or edx, -1
   322                              <1>  %else
   322                              <1>  mov edx, %4
   322                              <1>  %endif
   322                              <1>  %elifnidni %4, edx
   322                              <1>  mov edx, %4
   322                              <1>  %endif
   322                              <1>  %endif
   322                              <1>  %ifnum %3
   322                              <1>  %if %3 == 0
   322 000002DB 31C9                <1>  xor ecx, ecx
   322                              <1>  %elif %3 == -1
   322                              <1>  or ecx, -1
   322                              <1>  %else
   322                              <1>  mov ecx, %3
   322                              <1>  %endif
   322                              <1>  %elifnidni %3, ecx
   322                              <1>  mov ecx, %3
   322                              <1>  %endif
   322                              <1>  %endif
   322                              <1>  %ifnum %2
   322                              <1>  %if %2 == 0
   322                              <1>  xor ebx, ebx
   322                              <1>  %elif %2 == -1
   322                              <1>  or ebx, -1
   322                              <1>  %else
   322                              <1>  mov ebx, %2
   322                              <1>  %endif
   322                              <1>  %elifnidni %2, ebx
   322 000002DD BB[53000000]        <1>  mov ebx, %2
   322                              <1>  %endif
   322                              <1>  %endif
   322 000002E2 B805000000          <1>  mov eax, SYS_ %+ %1
   322 000002E7 CD80                <1>  int 0x80
   322                              <1> %else
   322                              <1>  int 0x80
   322                              <1> %endif
   323 000002E9 85C0                    	test 	eax,eax
   324 000002EB 7853                    	js	.end
   325 000002ED 89C3                    	mov	ebx,eax
   326                                  	syscall read, ebx,buf,0x200;dns_q.qname_b,512
   326                              <1> %if %0 > 0
   326                              <1>  %if %0 > 1
   326                              <1>  %if %0 > 2
   326                              <1>  %if %0 > 3
   326                              <1>  %if %0 > 4
   326                              <1>  %if %0 > 5
   326                              <1>  %ifnum %6
   326                              <1>  %if %6 == 0
   326                              <1>  xor edi, edi
   326                              <1>  %elif %6 == -1
   326                              <1>  or edi, -1
   326                              <1>  %else
   326                              <1>  mov edi, %6
   326                              <1>  %endif
   326                              <1>  %elifnidni %6, edi
   326                              <1>  mov edi, %6
   326                              <1>  %endif
   326                              <1>  %endif
   326                              <1>  %ifnum %5
   326                              <1>  %if %5 == 0
   326                              <1>  xor esi, esi
   326                              <1>  %elif %5 == -1
   326                              <1>  or esi, -1
   326                              <1>  %else
   326                              <1>  mov esi, %5
   326                              <1>  %endif
   326                              <1>  %elifnidni %5, esi
   326                              <1>  mov esi, %5
   326                              <1>  %endif
   326                              <1>  %endif
   326                              <1>  %ifnum %4
   326                              <1>  %if %4 == 0
   326                              <1>  xor edx, edx
   326                              <1>  %elif %4 == -1
   326                              <1>  or edx, -1
   326                              <1>  %else
   326 000002EF BA00020000          <1>  mov edx, %4
   326                              <1>  %endif
   326                              <1>  %elifnidni %4, edx
   326                              <1>  mov edx, %4
   326                              <1>  %endif
   326                              <1>  %endif
   326                              <1>  %ifnum %3
   326                              <1>  %if %3 == 0
   326                              <1>  xor ecx, ecx
   326                              <1>  %elif %3 == -1
   326                              <1>  or ecx, -1
   326                              <1>  %else
   326                              <1>  mov ecx, %3
   326                              <1>  %endif
   326                              <1>  %elifnidni %3, ecx
   326 000002F4 B9[50020000]        <1>  mov ecx, %3
   326                              <1>  %endif
   326                              <1>  %endif
   326                              <1>  %ifnum %2
   326                              <1>  %if %2 == 0
   326                              <1>  xor ebx, ebx
   326                              <1>  %elif %2 == -1
   326                              <1>  or ebx, -1
   326                              <1>  %else
   326                              <1>  mov ebx, %2
   326                              <1>  %endif
   326                              <1>  %elifnidni %2, ebx
   326                              <1>  mov ebx, %2
   326                              <1>  %endif
   326                              <1>  %endif
   326 000002F9 B803000000          <1>  mov eax, SYS_ %+ %1
   326 000002FE CD80                <1>  int 0x80
   326                              <1> %else
   326                              <1>  int 0x80
   326                              <1> %endif
   327                                  	syscall close, ebx
   327                              <1> %if %0 > 0
   327                              <1>  %if %0 > 1
   327                              <1>  %if %0 > 2
   327                              <1>  %if %0 > 3
   327                              <1>  %if %0 > 4
   327                              <1>  %if %0 > 5
   327                              <1>  %ifnum %6
   327                              <1>  %if %6 == 0
   327                              <1>  xor edi, edi
   327                              <1>  %elif %6 == -1
   327                              <1>  or edi, -1
   327                              <1>  %else
   327                              <1>  mov edi, %6
   327                              <1>  %endif
   327                              <1>  %elifnidni %6, edi
   327                              <1>  mov edi, %6
   327                              <1>  %endif
   327                              <1>  %endif
   327                              <1>  %ifnum %5
   327                              <1>  %if %5 == 0
   327                              <1>  xor esi, esi
   327                              <1>  %elif %5 == -1
   327                              <1>  or esi, -1
   327                              <1>  %else
   327                              <1>  mov esi, %5
   327                              <1>  %endif
   327                              <1>  %elifnidni %5, esi
   327                              <1>  mov esi, %5
   327                              <1>  %endif
   327                              <1>  %endif
   327                              <1>  %ifnum %4
   327                              <1>  %if %4 == 0
   327                              <1>  xor edx, edx
   327                              <1>  %elif %4 == -1
   327                              <1>  or edx, -1
   327                              <1>  %else
   327                              <1>  mov edx, %4
   327                              <1>  %endif
   327                              <1>  %elifnidni %4, edx
   327                              <1>  mov edx, %4
   327                              <1>  %endif
   327                              <1>  %endif
   327                              <1>  %ifnum %3
   327                              <1>  %if %3 == 0
   327                              <1>  xor ecx, ecx
   327                              <1>  %elif %3 == -1
   327                              <1>  or ecx, -1
   327                              <1>  %else
   327                              <1>  mov ecx, %3
   327                              <1>  %endif
   327                              <1>  %elifnidni %3, ecx
   327                              <1>  mov ecx, %3
   327                              <1>  %endif
   327                              <1>  %endif
   327                              <1>  %ifnum %2
   327                              <1>  %if %2 == 0
   327                              <1>  xor ebx, ebx
   327                              <1>  %elif %2 == -1
   327                              <1>  or ebx, -1
   327                              <1>  %else
   327                              <1>  mov ebx, %2
   327                              <1>  %endif
   327                              <1>  %elifnidni %2, ebx
   327                              <1>  mov ebx, %2
   327                              <1>  %endif
   327                              <1>  %endif
   327 00000300 B806000000          <1>  mov eax, SYS_ %+ %1
   327 00000305 CD80                <1>  int 0x80
   327                              <1> %else
   327                              <1>  int 0x80
   327                              <1> %endif
   328 00000307 89CE                    	mov	esi,ecx
   329                                  .find_server:	    
   330 00000309 AC                      	lodsb
   331 0000030A 08C0                    	or	al,al
   332 0000030C 7432                    	jz	.end
   333 0000030E 3C6E                    	cmp	al,'n'
   334 00000310 75F7                    	jnz	.find_server
   335 00000312 813E616D6573            	cmp	dword[esi],'ames'
   336 00000318 75EF                    	jnz	.find_server
   337 0000031A 83C604                  	add	esi,4
   338 0000031D 813E65727665                cmp		dword[esi],'erve'
   339 00000323 75E4                    	jnz	.find_server
   340 00000325 83C604                  	add 	esi,4
   341 00000328 803E72                  	cmp 	byte[esi],"r"
   342 0000032B 75DC                    	jnz	.find_server
   343 0000032D 46                      	inc 	esi
   344                                  .strip:	
   345 0000032E AC                      	lodsb
   346 0000032F 3C20                            cmp 	al,' '
   347 00000331 76FB                    	jbe	.strip
   348 00000333 4E                      	dec	esi
   349 00000334 56                      	push 	esi
   350                                  .find_end:	    
   351 00000335 AC                      	lodsb
   352 00000336 3C2E                    	cmp 	al,'.'
   353 00000338 73FB                    	jnb	.find_end
   354 0000033A C646FF00                	mov	byte[esi-1],0
   355 0000033E 5E                      	pop	esi
   356 0000033F C3                      	ret
   357                                  .end:
   358 00000340 31F6                    	xor	esi,esi
   359 00000342 C3                      	ret
