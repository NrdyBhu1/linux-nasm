     1                                  ; Name        : fork.asm
     2                                  ;
     3                                  ; Build       : nasm "-felf64" forkprimer.asm -l forkprimer.lst -o forkprimer.o
     4                                  ;               ld -s -melf_x86_64 -o forkprimer forkprimer.o
     5                                  ;
     6                                  ; Description : A demonstration on fork syscall based on an example from Beej's Guide to IPC.
     7                                  ;               At the end the user needs to enter an exit status. The program accepts no more than 3
     8                                  ;               characters. An exit status is a number in [0 .. 255]. Any other value will be converted
     9                                  ;               with his ASCII equivalent from hexadecimal to decimal and displayed. The result of the exit state
    10                                  ;               will differ from the one entered if the user didn't entered a value between 0 and 255 both included.
    11                                  
    12                                  ; Source      : Beejs guide to IPC - http://beej.us/guide/bgipc/output/html/multipage/fork.html
    13                                  ;
    14                                  ; August 24, 2014 : assembler 64 bits version
    15                                  ; January 4, 2017 : discovered a bug, return codes are passed in rdi, not rdx
    16                                  
    17                                  bits 64
    18                                  align 16
    19                                  
    20                                  [list -]
    25                                  
    26                                  section .bss
    27                                  sv:
    28 00000000 <res 00000004>          .0:             resd    1               ;sv[0]
    29 00000004 <res 00000004>          .1:             resd    1               ;sv[1]
    30                                       
    31                                  section .data
    32                                      
    33                                  msg:
    34 00000000 466F726B206572726F-     .fork:          db      "Fork error",10
    34 00000009 720A               
    35                                  .fork.len:      equ     $-msg.fork
    36 0000000B 6572726F723A20736F-     .socket:        db      "error: socketpair",10
    36 00000014 636B6574706169720A 
    37                                  .socket.len:    equ     $-msg.socket
    38                                  parent:
    39 0000001D 706172656E74207365-     .send:          db      "parent send "
    39 00000026 6E6420             
    40                                  .send.len:      equ     $-parent.send
    41 00000029 706172656E74207265-     .read:          db      "parent read "
    41 00000032 616420             
    42                                  .read.len:      equ     $-parent.read
    43                                  child:
    44 00000035 6368696C642073656E-     .send:          db      "child send "
    44 0000003E 6420               
    45                                  .send.len:      equ     $-child.send
    46 00000040 6368696C6420726561-     .read:          db      "child read "
    46 00000049 6420               
    47                                  .read.len:      equ     $-child.read
    48 0000004B 0A                      eol:            db      10
    49 0000004C 62                      buf:            db      "b"
    50                                  
    51                                  section .text
    52                                       global  _start
    53                                  
    54                                  _start:
    55                                   ; create socket
    56 00000000 49BA-                       syscall socketpair,PF_LOCAL,SOCK_STREAM,0,sv           ;AF_UNIX is the posix name, same as PF_LOCAL
    56 00000002 [0000000000000000]-
    56 0000000A 4831D2BE01000000BF-
    56 00000013 01000000B835000000-
    56 0000001C 0F05               
    57 0000001E 4821C0                      and     rax,rax
    58 00000021 7927                        jns     .@1
    59 00000023 BA1200000048BE-             syscall write,stderr,msg.socket,msg.socket.len
    59 0000002A [0B00000000000000]-
    59 00000032 BF02000000B8010000-
    59 0000003B 000F05             
    60 0000003E BF01000000B83C0000-         syscall exit,1
    60 00000047 000F05             
    61                                  .@1:    
    62 0000004A B8390000000F05              syscall fork
    63 00000051 4821C0                      and     rax, rax                        ; rax contains the PID
    64 00000054 7927                        jns     .@2
    65 00000056 BA0B00000048BE-             syscall write,stderr,msg.fork,msg.fork.len
    65 0000005D [0000000000000000]-
    65 00000065 BF02000000B8010000-
    65 0000006E 000F05             
    66 00000071 BF01000000B83C0000-         syscall exit,1
    66 0000007A 000F05             
    67                                  .@2:     
    68 0000007D 0F85F8000000                jnz     .@4                              ; childs pid returned, go to parent
    69                                  
    70                                  ; The child process
    71                                  .@3:
    72 00000083 BA0100000048BE-             syscall read,qword[sv.1],buf,1
    72 0000008A [4C00000000000000]-
    72 00000092 488B3C25[04000000]-
    72 0000009A B8000000000F05     
    73 000000A1 BA0B00000048BE-             syscall write,stdout,child.read,child.read.len
    73 000000A8 [4000000000000000]-
    73 000000B0 BF01000000B8010000-
    73 000000B9 000F05             
    74 000000BC BA0100000048BE-             syscall write,stdout,buf,1
    74 000000C3 [4C00000000000000]-
    74 000000CB BF01000000B8010000-
    74 000000D4 000F05             
    75 000000D7 BA0100000048BE-             syscall write,stdout,eol,1
    75 000000DE [4B00000000000000]-
    75 000000E6 BF01000000B8010000-
    75 000000EF 000F05             
    76                                      ;toupper
    77 000000F2 8A0425[4C000000]            mov     al,byte[buf]
    78 000000F9 24DF                        and     al,11011111b
    79 000000FB 880425[4C000000]            mov     byte[buf],al
    80 00000102 BA0100000048BE-             syscall write,qword[sv.1],buf,1
    80 00000109 [4C00000000000000]-
    80 00000111 488B3C25[04000000]-
    80 00000119 B8010000000F05     
    81 00000120 BA0B00000048BE-             syscall write,stdout,child.send,child.send.len
    81 00000127 [3500000000000000]-
    81 0000012F BF01000000B8010000-
    81 00000138 000F05             
    82 0000013B BA0100000048BE-             syscall write,stdout,buf,1
    82 00000142 [4C00000000000000]-
    82 0000014A BF01000000B8010000-
    82 00000153 000F05             
    83 00000156 BA0100000048BE-             syscall write,stdout,eol,1
    83 0000015D [4B00000000000000]-
    83 00000165 BF01000000B8010000-
    83 0000016E 000F05             
    84 00000171 4831FFB83C0000000F-         syscall exit,0
    84 0000017A 05                 
    85                                          
    86                                  ; The parent process
    87                                  .@4:
    88 0000017B BA0100000048BE-             syscall write,qword[sv.0],buf,1
    88 00000182 [4C00000000000000]-
    88 0000018A 488B3C25[00000000]-
    88 00000192 B8010000000F05     
    89 00000199 BA0C00000048BE-             syscall write,stdout,parent.send,parent.send.len
    89 000001A0 [1D00000000000000]-
    89 000001A8 BF01000000B8010000-
    89 000001B1 000F05             
    90 000001B4 BA0100000048BE-             syscall write,stdout,buf,1
    90 000001BB [4C00000000000000]-
    90 000001C3 BF01000000B8010000-
    90 000001CC 000F05             
    91 000001CF BA0100000048BE-             syscall write,stdout,eol,1
    91 000001D6 [4B00000000000000]-
    91 000001DE BF01000000B8010000-
    91 000001E7 000F05             
    92 000001EA BA0100000048BE-             syscall read,qword[sv.0],buf,1
    92 000001F1 [4C00000000000000]-
    92 000001F9 488B3C25[00000000]-
    92 00000201 B8000000000F05     
    93 00000208 BA0C00000048BE-             syscall write,stdout,parent.read,parent.read.len
    93 0000020F [2900000000000000]-
    93 00000217 BF01000000B8010000-
    93 00000220 000F05             
    94 00000223 BA0100000048BE-             syscall write,stdout,buf,1
    94 0000022A [4C00000000000000]-
    94 00000232 BF01000000B8010000-
    94 0000023B 000F05             
    95 0000023E BA0100000048BE-             syscall write,stdout,eol,1
    95 00000245 [4B00000000000000]-
    95 0000024D BF01000000B8010000-
    95 00000256 000F05             
    96                                      ; wait for child to terminate
    97 00000259 4D31D24831D24831F6-         syscall wait4, 0, 0, 0, 0       ; wait for child to terminate
    97 00000262 4831FFB83D0000000F-
    97 0000026B 05                 
    98 0000026C 4831FFB83C0000000F-         syscall exit,0
    98 00000275 05                 
