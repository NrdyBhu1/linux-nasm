     1                                  ; Name:         hello.asm
     2                                  ; Build:        nasm "-felf64" hello.asm -o hello.o -l hello.lst
     3                                  ;               nasm "-felf64" libhello.asm -l libhello.lst -o libhello.o
     4                                  ;               ar rcs libhello.a libhello.o
     5                                  ;               ld -s -melf_x86_64 -o hello hello.o libhello.a
     6                                  ;               ----
     7                                  ;               or use makefile
     8                                  ;
     9                                  ; Run:          ./hello
    10                                  ; Description:  Shows the hello world program with the use of a static library
    11                                  ;               The purpose of a static library is to collect commonly used procedures
    12                                  ;               and store them in one archive file so we can use the archive file to
    13                                  ;               link other programs who use the same procedures. An archive file is not
    14                                  ;               a shared libary, each program assembled and linked with an archive file
    15                                  ;               will have the procedures in their listing.
    16                                  
    17                                  bits 64
    18                                  
    19                                  ; define the archive functions
    40                                  [list -]
    41                                          
    42                                  section .data
    43 00000000 48656C6C6F20776F72-         message: db  "Hello world!", 10
    44 00000009 6C64210A           
    45                                      .length: equ $-message
    46                                  
    47                                  section .text
    48                                      global _start
    49                                      
    50                                  _start:
    51 00000000 48BE-                       mov     rsi, message
    52 00000002 [0000000000000000] 
    53 0000000A BA0D000000                  mov     rdx, message.length
    54 0000000F E8(00000000)                call    WriteString
    55 00000014 4831FF                      xor     rdi, rdi
    56 00000017 E8(00000000)                call    Exit
