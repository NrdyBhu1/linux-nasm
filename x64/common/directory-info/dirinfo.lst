     1                                  ; Name:         dirinfo.asm
     2                                  ; Build:        nasm "-felf64" dirinfo.asm -l dirinfo.lst -o dirinfo.o
     3                                  ;               ld -s -melf_x86_64 -o dirinfo dirinfo.o 
     4                                  ;               or use makefile
     5                                  ; Run:          ./dirinfo
     6                                  ; Description:  displays directory entries information of the current working directory
     7                                  ; To-dos:       - the files and directories aren't sorted
     8                                  ;               - better layout
     9                                  ;               - integers display in decimal
    10                                  ;               - list directory entries from directory on command line
    11                                  
    12                                  BITS 64
    13                                  
   980                                  [list -]
   981          ******************       warning: using 64 bits syscalls
   982                                  
   983                                  section .bss
   984                                  
   985 00000000 <res 00000400>              buffer:   resb    1024
   986                                      .length:  equ     $-buffer
   987                                       
   988                                  section .data
   989                                  
   990                                      DIRENT64 dirent                   ; dirent structure
   991                              <1>  %1: ISTRUC DIRENT64_STRUC
   992 00000000 0000000000000000    <1>  at DIRENT64_STRUC.d_ino, dq 0
   993 00000008 0000000000000000    <1>  at DIRENT64_STRUC.d_off, dq 0
   994 00000010 0000                <1>  at DIRENT64_STRUC.d_reclen, dw 0
   995 00000012 00                  <1>  at DIRENT64_STRUC.d_type, db 0
   996 00000013 00<rept>            <1>  at DIRENT64_STRUC.d_name, times 256 db 0
   997                              <1>  IEND
   998                              <1>  %define %1.d_ino %1+DIRENT64_STRUC.d_ino
   999                              <1>  %define %1.d_off %1+DIRENT64_STRUC.d_off
  1000                              <1>  %define %1.d_reclen %1+DIRENT64_STRUC.d_reclen
  1001                              <1>  %define %1.d_type %1+DIRENT64_STRUC.d_type
  1002                              <1>  %define %1.d_name %1+DIRENT64_STRUC.d_name
  1003                                  
  1004 00000113 2E                          path:          db "."
  1005 00000114 0000000000000000            fd:            dq 0
  1006 0000011C 0000000000000000            nread:         dq 0
  1007 00000124 202020202020202020-         spacer0:       db "            ", 0
  1008 0000012D 20202000           
  1009 00000131 20207C202000                spacer:        db "  |  ", 0
  1010 00000137 2D2D2D2D2D2D2D2D2D-         line:          db "----------------------------------------------------------------------------------------------------------", 10, 0
  1011 00000140 2D2D2D2D2D2D2D2D2D-
  1012 00000149 2D2D2D2D2D2D2D2D2D-
  1013 00000152 2D2D2D2D2D2D2D2D2D-
  1014 0000015B 2D2D2D2D2D2D2D2D2D-
  1015 00000164 2D2D2D2D2D2D2D2D2D-
  1016 0000016D 2D2D2D2D2D2D2D2D2D-
  1017 00000176 2D2D2D2D2D2D2D2D2D-
  1018 0000017F 2D2D2D2D2D2D2D2D2D-
  1019 00000188 2D2D2D2D2D2D2D2D2D-
  1020 00000191 2D2D2D2D2D2D2D2D2D-
  1021 0000019A 2D2D2D2D2D2D2D0A00 
  1022 000001A3 2020202020696E6F64-         tableheader:   db "     inode        |    next entry      |    record length   |        filetype             |    filename  |", 10, 0
  1023 000001AC 652020202020202020-
  1024 000001B5 7C202020206E657874-
  1025 000001BE 20656E747279202020-
  1026 000001C7 2020207C2020202072-
  1027 000001D0 65636F7264206C656E-
  1028 000001D9 6774682020207C2020-
  1029 000001E2 20202020202066696C-
  1030 000001EB 657479706520202020-
  1031 000001F4 202020202020202020-
  1032 000001FD 7C2020202066696C65-
  1033 00000206 6E616D6520207C0A00 
  1034 0000020F 202020202020202020-         totallength:   db "                          Total length |  ", 0
  1035 00000218 202020202020202020-
  1036 00000221 202020202020202054-
  1037 0000022A 6F74616C206C656E67-
  1038 00000233 7468207C202000     
  1039                                                      
  1040                                  section .text
  1041                                      global _start
  1042                                  
  1043                                  _start:
  1044                                       
  1045 00000000 BE0000010048BF-             syscall     open, path, O_RDONLY | O_DIRECTORY  ; open path in readonly and as directory otherwise fail
  1046 00000007 [1301000000000000]-
  1047 0000000F B8020000000F05     
  1048 00000016 4821C0                      and         rax, rax
  1049 00000019 0F88CB010000                js          Exit                                ; there was an error, just exit
  1050 0000001F 48890425[14010000]          mov         qword[fd], rax                      ; save filedescriptor
  1051                                  
  1052 00000027 BA0004000048BE-             syscall     getdents64, qword[fd], buffer, buffer.length
  1053 0000002E [0000000000000000]-
  1054 00000036 488B3C25[14010000]-
  1055 0000003E B8D90000000F05     
  1056 00000045 4821C0                      and         rax, rax
  1057 00000048 0F8E8B010000                jle         Close                           ; if RAX = 0 : no entries, if RAX < 0 : error
  1058                                  
  1059 0000004E 48890425[1C010000]          mov         qword[nread], rax
  1060                                  
  1061 00000056 48BE-                       mov         rsi, line
  1062 00000058 [3701000000000000] 
  1063 00000060 E820020000                  call        String.ToSTDOUT
  1064 00000065 48BE-                       mov         rsi, tableheader
  1065 00000067 [A301000000000000] 
  1066 0000006F E811020000                  call        String.ToSTDOUT
  1067 00000074 48BE-                       mov         rsi, line
  1068 00000076 [3701000000000000] 
  1069 0000007E E802020000                  call        String.ToSTDOUT
  1070                                  
  1071 00000083 4831D2                      xor         rdx, rdx                        ; position in buffer
  1072                                  .repeat:     
  1073 00000086 48BB-                       mov         rbx, buffer                     ; buffer start
  1074 00000088 [0000000000000000] 
  1075 00000090 4801D3                      add         rbx, rdx                        ; buffer + position = entry
  1076                                      
  1077                                      ; next entry
  1078 00000093 4831C9                      xor         rcx, rcx                        ; length of entry
  1079 00000096 4889DE                      mov         rsi, rbx                        ; this entry
  1080 00000099 4883C310                    add         rbx, 16                         ; address of length of entry
  1081 0000009D 668B0B                      mov         cx, word[rbx]                   ; put in rcx
  1082 000000A0 48BF-                       mov         rdi, dirent                     ; dirent structure pointer in RDI
  1083 000000A2 [0000000000000000] 
  1084 000000AA FC                          cld
  1085 000000AB F3A4                        rep         movsb                           ; copy RCX bytes from RSI to RDI (into structure)
  1086                                      
  1087                                      ; read the entry record
  1088                                      
  1089 000000AD 52                          push        rdx
  1090                                  
  1091 000000AE 488B0425[00000000]          mov         rax, qword[dirent.d_ino]
  1092 000000B6 E866010000                  call        Register.64bitsToHex
  1093 000000BB 4889C6                      mov         rsi, rax                        ; pointer to buffer in RSI
  1094 000000BE E8C2010000                  call        String.ToSTDOUT
  1095                                      
  1096 000000C3 48BE-                       mov         rsi, spacer
  1097 000000C5 [3101000000000000] 
  1098 000000CD E8B3010000                  call        String.ToSTDOUT
  1099                                      
  1100                                      ; 
  1101 000000D2 488B0425[08000000]          mov         rax, qword[dirent.d_off]
  1102 000000DA E842010000                  call        Register.64bitsToHex
  1103 000000DF 4889C6                      mov         rsi, rax
  1104 000000E2 E89E010000                  call        String.ToSTDOUT
  1105                                      
  1106 000000E7 48BE-                       mov         rsi, spacer
  1107 000000E9 [3101000000000000] 
  1108 000000F1 E88F010000                  call        String.ToSTDOUT
  1109                                  
  1110 000000F6 48BE-                       mov         rsi, spacer0
  1111 000000F8 [2401000000000000] 
  1112 00000100 E880010000                  call        String.ToSTDOUT
  1113                                      
  1114 00000105 668B0425[10000000]          mov         ax, word[dirent.d_reclen]
  1115 0000010D E820010000                  call        Register.16bitsToHex
  1116 00000112 4889C6                      mov         rsi, rax
  1117 00000115 E86B010000                  call        String.ToSTDOUT
  1118                                      
  1119 0000011A 48BE-                       mov         rsi, spacer
  1120 0000011C [3101000000000000] 
  1121 00000124 E85C010000                  call        String.ToSTDOUT
  1122                                      
  1123 00000129 8A0425[12000000]            mov         al, byte[dirent.d_type]
  1124 00000130 E818010000                  call        Register.8bitsToHex
  1125 00000135 4889C6                      mov         rsi, rax
  1126 00000138 E848010000                  call        String.ToSTDOUT
  1127                                      
  1128 0000013D 48BE-                       mov         rsi, spacer
  1129 0000013F [3101000000000000] 
  1130 00000147 E839010000                  call        String.ToSTDOUT
  1131                                      
  1132 0000014C 8A0425[12000000]            mov         al, byte[dirent.d_type]
  1133 00000153 E89C000000                  call        Entry.GetType
  1134 00000158 488B30                      mov         rsi, qword[rax]
  1135 0000015B E825010000                  call        String.ToSTDOUT
  1136                                      
  1137 00000160 48BE-                       mov         rsi, spacer
  1138 00000162 [3101000000000000] 
  1139 0000016A E816010000                  call        String.ToSTDOUT
  1140                                      
  1141 0000016F 48BE-                       mov         rsi, dirent.d_name              ; name of entry
  1142 00000171 [1300000000000000] 
  1143 00000179 E807010000                  call        String.ToSTDOUT
  1144                                      
  1145 0000017E B00A                        mov         al, 0x0A
  1146 00000180 E810010000                  call        Character.ToSTDOUT
  1147                                      
  1148 00000185 5A                          pop         rdx
  1149                                      ; prepare to read next entry
  1150 00000186 66031425[10000000]          add         dx, word[dirent.d_reclen]
  1151 0000018E 488B0425[1C010000]          mov         rax, qword[nread]
  1152 00000196 4839C2                      cmp         rdx, rax
  1153 00000199 0F8CE7FEFFFF                jl          .repeat
  1154                                      
  1155 0000019F 48BE-                       mov         rsi, line
  1156 000001A1 [3701000000000000] 
  1157 000001A9 E8D7000000                  call        String.ToSTDOUT
  1158                                      
  1159 000001AE 48BE-                       mov         rsi, totallength
  1160 000001B0 [0F02000000000000] 
  1161 000001B8 E8C8000000                  call        String.ToSTDOUT
  1162                                      
  1163 000001BD 488B0425[1C010000]          mov         rax, qword[nread]
  1164 000001C5 E857000000                  call        Register.64bitsToHex
  1165 000001CA 4889C6                      mov         rsi, rax
  1166 000001CD E8B3000000                  call        String.ToSTDOUT
  1167                                      
  1168 000001D2 B00A                        mov         al, 10                          ; end of line
  1169 000001D4 E8BC000000                  call        Character.ToSTDOUT
  1170                                       
  1171                                  Close:     
  1172 000001D9 48BF-                       mov         rdi, fd                         ; fd in RDI
  1173 000001DB [1401000000000000] 
  1174 000001E3 B803000000                  mov         rax, SYS_CLOSE                  ; close file descriptor
  1175 000001E8 0F05                        syscall
  1176                                       
  1177                                  Exit:     
  1178 000001EA 4831FF                      xor         rdi, rdi
  1179 000001ED B83C000000                  mov         rax, SYS_EXIT
  1180 000001F2 0F05                        syscall
  1181                                      
  1182                                  Entry:
  1183                                  .GetType:
  1184                                      section     .data
  1185                                      ; keep all strings the same size to display them neatly in the table.
  1186                                      FileType:
  1187 0000023A 756E6B6E6F776E2020-         .Unknown:      db "unknown           ",0
  1188 00000243 202020202020202020-
  1189 0000024C 00                 
  1190 0000024D 6E616D656420706970-         .Fifo:         db "named pipe        ",0
  1191 00000256 652020202020202020-
  1192 0000025F 00                 
  1193 00000260 636861726163746572-         .Character:    db "character device  ",0
  1194 00000269 206465766963652020-
  1195 00000272 00                 
  1196 00000273 6469726563746F7279-         .Directory:    db "directory         ",0
  1197 0000027C 202020202020202020-
  1198 00000285 00                 
  1199 00000286 626C6F636B20646576-         .Block:        db "block device      ",0
  1200 0000028F 696365202020202020-
  1201 00000298 00                 
  1202 00000299 726567756C61722066-         .Regular:      db "regular file      ",0
  1203 000002A2 696C65202020202020-
  1204 000002AB 00                 
  1205 000002AC 73796D626F6C696320-         .Link:         db "symbolic link     ",0
  1206 000002B5 6C696E6B2020202020-
  1207 000002BE 00                 
  1208 000002BF 756E697820646F6D61-         .Socket:       db "unix domain socket",0
  1209 000002C8 696E20736F636B6574-
  1210 000002D1 00                 
  1211 000002D2 656E74727920776974-         .Without:      db "entry without type",0
  1212 000002DB 686F75742074797065-
  1213 000002E4 00                 
  1214                                      
  1215                                      ; the values are:
  1216                                      ; decimal  binary
  1217                                      ; 0         0000 ; file type unknown
  1218                                      ; 1         0001 ; named pipe (fifo)
  1219                                      ; 2         0010 ; character device
  1220                                      ; 4         0100 ; directory
  1221                                      ; 6         0110 ; block device
  1222                                      ; 8         1000 ; regular file
  1223                                      ; 10        1010 ; symbolic link
  1224                                      ; 12        1100 ; UNIX domain socket
  1225                                      ; 14        1110 ; entry without file type ; undocumented
  1226                                      ; To lookup in the table for the appropriate string for each value, we can make use of a table with 15 entries and most of them will be zero (null pointer)
  1227                                      ; To shorten the table we can however play with the bit positions. If we change the bits from position in the following manner:
  1228                                      ; b3 b2 b1 b0 to b0 b1 b2 b3 then the values for each filetype are as showed:
  1229                                      ;
  1230                                      ; initial decimal after change decimal
  1231                                      ; ------- ------- ------------ -------
  1232                                      ; 0000       0         0000      0     ; file type unknown
  1233                                      ; 0001       1         1000      8     ; named pipe (fifo)
  1234                                      ; 0010       2         0100      4     ; character device
  1235                                      ; 0100       4         0010      2     ; directory
  1236                                      ; 0110       6         0110      6     ; block device
  1237                                      ; 1000       8         0001      1     ; regular file
  1238                                      ; 1010      10         0101      5     ; symbolic link
  1239                                      ; 1100      12         0011      3     ; UNIX domain socket
  1240                                      ; 1110      14         0111      7     ; entry without file type ; undocumented
  1241                                      ;
  1242                                      ; the new values, sorted ascending will give the next table
  1243                                      ;
  1244                                      ; 0000       0         0000      0     ; file type unknown
  1245                                      ; 1000       8         0001      1     ; regular file
  1246                                      ; 0100       4         0010      2     ; directory
  1247                                      ; 1100      12         0011      3     ; UNIX domain socket
  1248                                      ; 0010       2         0100      4     ; character device
  1249                                      ; 1010      10         0101      5     ; symbolic link
  1250                                      ; 0110       6         0110      6     ; block device
  1251                                      ; 1110      14         0111      7     ; entry without file type ; undocumented
  1252                                      ; 0001       1         1000      8     ; named pipe (fifo)
  1253                                      ;
  1254                                      ; now we know how to place the pointers to the strings in our lookup table
  1255                                  
  1256 000002E5 [3A02000000000000]-         .Table:        dq   .Unknown, .Regular, .Directory, .Socket, .Character, .Link, .Block, .Without, .Fifo
  1257 000002ED [9902000000000000]-
  1258 000002F5 [7302000000000000]-
  1259 000002FD [BF02000000000000]-
  1260 00000305 [6002000000000000]-
  1261 0000030D [AC02000000000000]-
  1262 00000315 [8602000000000000]-
  1263 0000031D [D202000000000000]-
  1264 00000325 [4D02000000000000] 
  1265                                      
  1266                                      
  1267                                  section     .text
  1268                                  
  1269                                      ; The algorithm to change make a mirror of the bits can be found in Hacker's Delight.
  1270                                      ; Since we deal with 4 bits in 8 bits registers we only need to process the 4 least significant bits.
  1271                                      
  1272 000001F4 4883E00F                    and         rax, 0Fh                ; delete unnecessary bits
  1273 000001F8 88C4                        mov         ah, al                  ; copy value in AH
  1274                                      ; algorithm to mirror 4 bits
  1275 000001FA 80E455                      and         ah, 0x55
  1276 000001FD D0E4                        shl         ah, 1
  1277 000001FF 24AA                        and         al, 0xAA
  1278 00000201 D0E8                        shr         al, 1
  1279 00000203 08E0                        or          al, ah
  1280 00000205 88C4                        mov         ah, al
  1281 00000207 80E433                      and         ah, 0x33
  1282 0000020A C0E402                      shl         ah, 2
  1283 0000020D 24CC                        and         al, 0xCC
  1284 0000020F C0E802                      shr         al, 2
  1285 00000212 08E0                        or          al, ah
  1286                                      ; delete AH
  1287 00000214 30E4                        xor         ah, ah
  1288                                      ; multiply by 8 to calculate 64 bits offset of the string to display.
  1289 00000216 48C1E003                    shl         rax, 3                  ; 8 bytes for 64 bit pointer
  1290                                      ; added to our base address of the table 
  1291 0000021A 4805[E5020000]              add         rax, FileType.Table
  1292 00000220 C3                          ret
  1293                                  
  1294                                  ; routines to display and process register values    
  1295                                  Register:
  1296                                  
  1297                                  section     .bss
  1298                                      
  1299 00000400 <res 00000010>              .hexbuffer:       resb    16
  1300 00000410 <res 00000001>              .dummy:           resb    1               ; end of string
  1301                                      
  1302                                  section     .text
  1303                                      
  1304                                  .64bitsToHex:    
  1305 00000221 B910000000                  mov         rcx, 16                         ; 16 nibbles x 4 bits/nibble = 64 bits
  1306 00000226 48BF-                       mov         rdi, .hexbuffer
  1307 00000228 [0004000000000000] 
  1308 00000230 EB36                        jmp         .convert
  1309                                  .16bitsToHex:
  1310 00000232 B904000000                  mov         rcx, 4
  1311 00000237 48BF-                       mov         rdi, .hexbuffer+24
  1312 00000239 [1804000000000000] 
  1313 00000241 4825FFFF0000                and         rax, 0FFFFh
  1314 00000247 48C1C810                    ror         rax, 16                         ; move word bits to upper registry bits
  1315 0000024B EB1B                        jmp         .convert
  1316                                  .8bitsToHex:
  1317 0000024D B902000000                  mov         rcx, 2
  1318 00000252 48BF-                       mov         rdi, .hexbuffer+30
  1319 00000254 [1E04000000000000] 
  1320 0000025C 4825FF000000                and         rax, 0FFh
  1321 00000262 48C1C808                    ror         rax, 8                          ; move byte bits to upper registry bits
  1322 00000266 EB00                        jmp         .convert
  1323                                      
  1324                                  .convert:
  1325 00000268 57                          push        rdi                             ; save buffer
  1326                                      ; convert RAX to ASCII hexadecimal
  1327 00000269 4889C2                      mov         rdx, rax
  1328 0000026C 4831C0                      xor         rax, rax
  1329 0000026F FC                          cld
  1330                                  .repeat:    
  1331 00000270 48C1C204                    rol         rdx, 4                          ; start with most significant nibble first
  1332 00000274 88D0                        mov         al, dl
  1333 00000276 240F                        and         al, 0Fh
  1334 00000278 3C09                        cmp         al, 9
  1335 0000027A 7602                        jbe         .toascii
  1336 0000027C 0407                        add         al, 7
  1337                                  .toascii:
  1338 0000027E 0430                        add         al, "0"
  1339 00000280 AA                          stosb                                       ; store AL in hexbuffer
  1340 00000281 E2ED                        loop        .repeat
  1341 00000283 58                          pop         rax                             ; start of buffer in RAX
  1342 00000284 C3                          ret
  1343                                      
  1344                                  String:
  1345                                  .ToSTDOUT:
  1346 00000285 FC                          cld
  1347                                  .repeat:     
  1348 00000286 AC                          lodsb
  1349 00000287 20C0                        and        al, al
  1350 00000289 7409                        jz         .done
  1351 0000028B 56                          push       rsi
  1352 0000028C E804000000                  call       Character.ToSTDOUT
  1353 00000291 5E                          pop        rsi
  1354 00000292 EBF2                        jmp        .repeat
  1355                                  .done:
  1356 00000294 C3                          ret
  1357                                  
  1358                                  Character:
  1359                                      section     .bss  
  1360                                        
  1361 00000411 <res 00000001>              .charbuffer:         resb    1
  1362                                      
  1363                                      section     .text
  1364                                        
  1365                                  .ToSTDOUT:
  1366 00000295 880425[11040000]            mov        byte[.charbuffer], al
  1367 0000029C BA0100000048BE-             syscall    write, stdout, .charbuffer, 1
  1368 000002A3 [1104000000000000]-
  1369 000002AB BF01000000B8010000-
  1370 000002B4 000F05             
  1371 000002B7 C3                          ret
