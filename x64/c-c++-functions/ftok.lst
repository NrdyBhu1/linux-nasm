     1                                  ; Name:     ftok.asm
     2                                  ;
     3                                  ; Build:    nasm "-felf64" ftok.asm -l ftok.lst -o ftok.o
     4                                  ;
     5                                  ; Description:  This is the assembler version of the c/c++ function ftok.
     6                                  ;               the type key_t is actually just a long, you can use any number you want. But what if you hard-code the number and some other unrelated
     7                                  ;               program hardcodes the same number but wants another queue? The solution is to use the ftok() function which generates a key from two arguments:
     8                                  ;               key_t ftok(const char *path, int id);
     9                                  ;
    10                                  ; source: http://beej.us/guide/bgipc/output/html/multipage/mq.html
    11                                  
    12                                  global  ftok        ; make the function accessible for other programs
    13                                  
   933                                  [list -]
   934          ******************       warning: using 64 bits syscalls
   935                                  
   936                                  section .data
   937                                  
   938                                       STAT       stat
   939                              <1>  %1:
   940                              <1>  ISTRUC STAT_STRUC
   941 00000000 0000000000000000    <1>  at STAT_STRUC.st_dev, dq 0
   942 00000008 0000000000000000    <1>  at STAT_STRUC.st_ino, dq 0
   943 00000010 0000000000000000    <1>  at STAT_STRUC.st_nlink, dq 0
   944 00000018 00000000            <1>  at STAT_STRUC.st_mod, dd 0
   945 0000001C 00000000            <1>  at STAT_STRUC.st_uid, dd 0
   946 00000020 00000000            <1>  at STAT_STRUC.st_gid, dd 0
   947 00000024 0000000000000000    <1>  at STAT_STRUC.st_rdev, dq 0
   948 0000002C 00000000            <1>  at STAT_STRUC._pad1, dd 0
   949 00000030 0000000000000000    <1>  at STAT_STRUC.st_size, dq 0
   950 00000038 00000000            <1>  at STAT_STRUC.st_blksize, dd 0
   951 0000003C 00000000            <1>  at STAT_STRUC._pad2, dd 0
   952 00000040 0000000000000000    <1>  at STAT_STRUC.st_blocks, dq 0
   953 00000048 0000000000000000    <1>  at STAT_STRUC.st_atime, dq 0
   954 00000050 0000000000000000    <1>  at STAT_STRUC.st_atime_nsec, dq 0
   955 00000058 0000000000000000    <1>  at STAT_STRUC.st_mtime, dq 0
   956 00000060 0000000000000000    <1>  at STAT_STRUC.st_mtime_nsec, dq 0
   957 00000068 0000000000000000    <1>  at STAT_STRUC.st_ctime, dq 0
   958 00000070 0000000000000000    <1>  at STAT_STRUC.st_ctime_nsec, dq 0
   959 00000078 0000000000000000    <1>  at STAT_STRUC._unused1, dq 0
   960 00000080 0000000000000000    <1>  at STAT_STRUC._unused2, dq 0
   961 00000088 0000000000000000    <1>  at STAT_STRUC._unused3, dq 0
   962                              <1>  IEND
   963                              <1> 
   964                              <1> 
   965                              <1> 
   966                              <1>  %define %1.st_dev %1+STAT_STRUC.st_dev
   967                              <1>  %define %1.st_ino %1+STAT_STRUC.st_ino
   968                              <1>  %define %1.st_nlink %1+STAT_STRUC.st_nlink
   969                              <1>  %define %1.st_mod %1+STAT_STRUC.st_mod
   970                              <1>  %define %1.st_uid %1+STAT_STRUC.st_uid
   971                              <1>  %define %1.st_gid %1+STAT_STRUC.st_gid
   972                              <1>  %define %1.st_rdev %1+STAT_STRUC.st_rdev
   973                              <1> 
   974                              <1>  %define %1.st_size %1+STAT_STRUC.st_size
   975                              <1>  %define %1.st_blksize %1+STAT_STRUC.st_blksize
   976                              <1> 
   977                              <1>  %define %1.st_blocks %1+STAT_STRUC.st_blocks
   978                              <1>  %define %1.st_atime %1+STAT_STRUC.st_atime
   979                              <1>  %define %1.st_atime_nsec %1+STAT_STRUC.st_atime_nsec
   980                              <1>  %define %1.st_mtime %1+STAT_STRUC.st_mtime
   981                              <1>  %define %1.st_mtime_nsec %1+STAT_STRUC.st_mtime_nsec
   982                              <1>  %define %1.st_ctime %1+STAT_STRUC.st_ctime
   983                              <1>  %define %1.st_ctime_nsec %1+STAT_STRUC.st_ctime_nsec
   984                              <1> 
   985                              <1> 
   986                              <1> 
   987                                       
   988                                  section .text
   989                                  
   990                                  ftok:
   991                                       ; entry:      RDI has the path/file string to the file
   992                                       ;             RSI has an 'project id' arbitrary choosen.
   993                                       ; on return:  RAX has a unique key
   994                                       ; on failure: RAX = a negative number containing the error
   995                                       ;
   996                                       ; the ftok function is defined in c/c++ as follows:
   997                                       ; key = ((st.st_ino & 0xffff) | ((st.st_dev & 0xff) << 16) | ((proj_id & 0xff) << 24));
   998                                  
   999                                       ; save the project id in R8 (will remain after syscalls)
  1000 00000000 4989F0                       mov       r8, rsi
  1001                                       ; open the file
  1002 00000003 4831F6B8020000000F-          syscall   open, rdi, O_RDONLY
  1003 0000000C 05                 
  1004 0000000D 4821C0                       and       rax, rax
  1005 00000010 784B                         js        .done                                ; something wrong, errno in rax and return
  1006 00000012 48BE-                        syscall   fstat, rax, stat                     ; get filestatus
  1007 00000014 [0000000000000000]-
  1008 0000001C 4889C7B8050000000F-
  1009 00000025 05                 
  1010 00000026 4821C0                       and       rax, rax
  1011 00000029 7832                         js        .done                                ; something wrong, errno in rax and return
  1012 0000002B 488B0425[08000000]           mov       rax, qword [stat.st_ino]             ; get the file size
  1013 00000033 4825FFFF0000                 and       rax, 0xFFFF
  1014 00000039 488B1C25[00000000]           mov       rbx, qword [stat.st_dev]             ; ID of device containing file
  1015 00000041 4881E3FF000000               and       rbx, 0xFF
  1016 00000048 48C1E310                     shl       rbx, 16
  1017 0000004C 4809D8                       or        rax, rbx
  1018 0000004F 4981E0FF000000               and       r8, 0xFF                             ; R8 = proj_id
  1019 00000056 49C1E018                     shl       r8, 24
  1020 0000005A 4C09C0                       or        rax, r8
  1021                                       ; rax now contains a key which uniquely identifies the file.
  1022                                  .done:     
  1023 0000005D C3                           ret
