     1                                  ORG 0x7C00
     2                                  BITS 16
     3                                  start:
     4 00000000 EA[0800]0000              jmp     0x0000:boot
     5 00000005 00<rept>                  times 8-($-$$) db 0
     6                                   
     7                                    ;  Boot Information Table
     8                                  ;  bi_PrimaryVolumeDescriptor  resd  1    ; LBA of the Primary Volume Descriptor
     9                                  ;  bi_BootFileLocation         resd  1    ; LBA of the Boot File
    10                                  ;  bi_BootFileLength           resd  1    ; Length of the boot file in bytes
    11                                  ;  bi_Checksum                 resd  1    ; 32 bit checksum
    12                                  ;  bi_Reserved                 resb  40   ; Reserved 'for future standardization'
    13                                   
    14                                  boot:
    15                                    ;  Boot code here - set segment registers etc...
    16                                    ; Main entry point where BIOS leaves us.
    17                                  ; Start of the program (thus at address 0x0000:0x7C00)
    18                                  
    19                                          ; Some BIOS' may load us at 0x0000:0x7C00 while other may load us at 0x07C0:0x0000.
    20                                          ; Do a far jump to fix this issue, and reload CS to 0x0000.
    21                                  
    22 00000008 EA[0D00]0000                    jmp     0x0000:.flushCS               
    23                                                                       
    24                                  .flushCS:
    25 0000000D B8024F                  mov  ax, 0x4F02
    26 00000010 BB0701                  mov  bx, 0x107              ; <-1280x1024 256 = 107h colors
    27                                  ;or   bx, 0x8000               ; don't clear video memory
    28                                  ;mov  ax,0x006A
    29 00000013 CD10                    int  0x10
    30                                  ; switch bank
    31                                  ; mov ax, 0x4F05
    32                                  ; mov bx, 0
    33                                  ; mov dx, 0
    34                                  ; int 0x10
    35                                  ;mov ax,012h ;VGA mode
    36                                  ; int 10h ;640 x 480 16 colors.
    37                                  
    38 00000015 B800A0                  mov ax, 0xA000
    39 00000018 8EC0                    mov es:ax
    40                                  
    41 0000001A B90000                  mov cx, 0                                              ; banknumber
    42                                  nextbank:
    43                                  ; switch bank
    44 0000001D B8054F                   mov ax, 0x4F05
    45 00000020 BB0000                   mov bx, 0
    46 00000023 89CA                     mov dx, cx                                            ; switch to banknumber in cx
    47 00000025 CD10                     int 0x10
    48                                   ; draw again
    49 00000027 B80001                   mov ax, 256                                            ; banknr * displacement 256
    50 0000002A 89CB                     mov bx, cx
    51 0000002C F7E3                     mul bx
    52 0000002E 89C7                     mov di, ax
    53 00000030 B008                     mov al, 00001000b                                             ; 0 = zwart
    54 00000032 51                       push cx                                                 ; save banknumber
    55 00000033 B90041                   mov cx, 1280*13
    56 00000036 F3AA                     rep stosb
    57                                   ;pop cx                                                ; restore banknumber
    58                                   ;add di, 1280*13-1                                      ; to last pixel = 1280 pixels in a line * 13 lines - 1 for nul position + banknr * 256 displacement
    59                                   ;mov cx, 1280*13-1
    60                                   ;rep stosb
    61 00000038 59                       pop cx                                                ; restore banknumber
    62                                   ; we have 1024 lines on screen, per bank we draw 14 lines -> 1024 / 14 = approx 73 banks
    63 00000039 41                       inc cx
    64 0000003A 83F94F                   cmp cx, 79
    65 0000003D 75DE                     jne nextbank
    66                                   
    67                                   ; switch bank
    68                                  ; mov ax, 0x4F05
    69                                  ; mov bx, 0
    70                                  ; mov dx, 1
    71                                  ; int 0x10
    72                                   ; draw again
    73                                  ; mov al,00110000b
    74                                  ; mov di, 1*256
    75                                  ; mov cx, 1
    76                                  ; rep stosb
    77                                  ; mov di, 1280*13-1+1*256
    78                                  ; mov cx, 1
    79                                  ; rep stosb
    80                                   
    81                                   ; switch bank
    82                                  ; mov ax, 0x4F05
    83                                  ; mov bx, 0
    84                                  ; mov dx, 2
    85                                  ; int 0x10
    86                                   ; draw again
    87                                  ; mov al,00110000b
    88                                  ; mov di, 2*256
    89                                  ; mov cx, 1
    90                                  ; rep stosb
    91                                  ; mov di, 1280*13-1+2*256
    92                                  ; mov cx, 1
    93                                  ; rep stosb
    94                                   
    95                                   ;mov dx,03C4h ;dx = indexregister
    96                                   ;mov ax,0F02h            ;INDEX = MASK MAP, 
    97                                   ;out dx,ax               ;write all the bitplanes.
    98                                   ;mov di,0 ;DI pointer in the video memory.
    99                                   ;mov cx,(800 * 600)/16
   100                                   ;;mov ah, 0x05
   101                                   ;mov al,0xFF ;write to every pixel.
   102                                  ;; rep 
   103                                   ;stosb ;fill the screen
   104                                  
   105                                   ;mov dx,03C4h ;dx = indexregister
   106                                   ;mov ax,0102h ;INDEX = MASK MAP, 
   107                                   ;out dx,ax ;write all the bitplanes.
   108                                   ;mov di,1000                  ;DI pointer in the video memory.
   109                                   ;mov cx,(800 * 600)/16
   110                                   ;;mov ah, 0x05
   111                                   ;mov al,0xFF ;write to every pixel.
   112                                  ;; rep 
   113                                   ;stosb ;fill the screen
   114                                   
   115 0000003F EBFE                     .end: jmp .end     
   116                                       
   117                                       
